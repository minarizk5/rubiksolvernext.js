{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["file:///Users/minarizk/Downloads/rubiknext/node_modules/next/src/server/route-modules/app-page/module.compiled.js"],"sourcesContent":["if (process.env.NEXT_RUNTIME === 'edge') {\n  module.exports = require('next/dist/server/route-modules/app-page/module.js')\n} else {\n  if (process.env.__NEXT_EXPERIMENTAL_REACT) {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.prod.js')\n      }\n    }\n  } else {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.prod.js')\n      }\n    }\n  }\n}\n"],"names":["process","env","NEXT_RUNTIME","module","exports","require","__NEXT_EXPERIMENTAL_REACT","NODE_ENV","TURBOPACK"],"mappings":";AAAA,IAAIA,QAAQC,GAAG,CAACC,YAAY,KAAK,MAAQ;;AAEzC,OAAO;IACL,IAAIF,QAAQC,GAAG,CAACK,uBAA2B,EAAF;;IAczC,OAAO;QACL,IAAIN,QAAQC,GAAG,CAACM,QAAQ,KAAK,WAAe;YAC1C,IAAIP,QAAQC,GAAG,CAACO,SAAS,eAAE;gBACzBL,OAAOC,OAAO,GAAGC,QAAQ;YAC3B,OAAO;;YAEP;QACF,OAAO;;QAMP;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":["file:///Users/minarizk/Downloads/rubiknext/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.ts"],"sourcesContent":["module.exports = require('../../module.compiled').vendored[\n  'react-ssr'\n].ReactJsxDevRuntime\n"],"names":["module","exports","require","vendored","ReactJsxDevRuntime"],"mappings":";AAAAA,OAAOC,OAAO,GAAGC,QAAQ,4HAAyBC,QAAQ,CACxD,YACD,CAACC,kBAAkB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":["file:///Users/minarizk/Downloads/rubiknext/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react.ts"],"sourcesContent":["module.exports = require('../../module.compiled').vendored['react-ssr'].React\n"],"names":["module","exports","require","vendored","React"],"mappings":";AAAAA,OAAOC,OAAO,GAAGC,QAAQ,4HAAyBC,QAAQ,CAAC,YAAY,CAACC,KAAK","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 43, "column": 0}, "map": {"version":3,"sources":["file:///Users/minarizk/Downloads/rubiknext/node_modules/cubejs/lib/cube.js"],"sourcesContent":["(function() {\n  // Centers\n  var B, BL, BR, Cube, D, DB, DBL, DF, DFR, DL, DLF, DR, DRB, F, FL, FR, L, R, U, UB, UBR, UF, UFL, UL, ULB, UR, URF, centerColor, centerFacelet, cornerColor, cornerFacelet, edgeColor, edgeFacelet;\n\n  [U, R, F, D, L, B] = [0, 1, 2, 3, 4, 5];\n\n  // Corners\n  [URF, UFL, ULB, UBR, DFR, DLF, DBL, DRB] = [0, 1, 2, 3, 4, 5, 6, 7];\n\n  // Edges\n  [UR, UF, UL, UB, DR, DF, DL, DB, FR, FL, BL, BR] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n\n  [centerFacelet, cornerFacelet, edgeFacelet] = (function() {\n    var _B, _D, _F, _L, _R, _U;\n    _U = function(x) {\n      return x - 1;\n    };\n    _R = function(x) {\n      return _U(9) + x;\n    };\n    _F = function(x) {\n      return _R(9) + x;\n    };\n    _D = function(x) {\n      return _F(9) + x;\n    };\n    _L = function(x) {\n      return _D(9) + x;\n    };\n    _B = function(x) {\n      return _L(9) + x;\n    };\n    return [\n      // Centers\n      [4,\n      13,\n      22,\n      31,\n      40,\n      49],\n      // Corners\n      [[_U(9),\n      _R(1),\n      _F(3)],\n      [_U(7),\n      _F(1),\n      _L(3)],\n      [_U(1),\n      _L(1),\n      _B(3)],\n      [_U(3),\n      _B(1),\n      _R(3)],\n      [_D(3),\n      _F(9),\n      _R(7)],\n      [_D(1),\n      _L(9),\n      _F(7)],\n      [_D(7),\n      _B(9),\n      _L(7)],\n      [_D(9),\n      _R(9),\n      _B(7)]],\n      // Edges\n      [[_U(6),\n      _R(2)],\n      [_U(8),\n      _F(2)],\n      [_U(4),\n      _L(2)],\n      [_U(2),\n      _B(2)],\n      [_D(6),\n      _R(8)],\n      [_D(2),\n      _F(8)],\n      [_D(4),\n      _L(8)],\n      [_D(8),\n      _B(8)],\n      [_F(6),\n      _R(4)],\n      [_F(4),\n      _L(6)],\n      [_B(6),\n      _L(4)],\n      [_B(4),\n      _R(6)]]\n    ];\n  })();\n\n  centerColor = ['U', 'R', 'F', 'D', 'L', 'B'];\n\n  cornerColor = [['U', 'R', 'F'], ['U', 'F', 'L'], ['U', 'L', 'B'], ['U', 'B', 'R'], ['D', 'F', 'R'], ['D', 'L', 'F'], ['D', 'B', 'L'], ['D', 'R', 'B']];\n\n  edgeColor = [['U', 'R'], ['U', 'F'], ['U', 'L'], ['U', 'B'], ['D', 'R'], ['D', 'F'], ['D', 'L'], ['D', 'B'], ['F', 'R'], ['F', 'L'], ['B', 'L'], ['B', 'R']];\n\n  Cube = (function() {\n    var faceNames, faceNums, parseAlg;\n\n    class Cube {\n      constructor(other) {\n        var x;\n        if (other != null) {\n          this.init(other);\n        } else {\n          this.identity();\n        }\n        // For moves to avoid allocating new objects each time\n        this.newCenter = (function() {\n          var k, results;\n          results = [];\n          for (x = k = 0; k <= 5; x = ++k) {\n            results.push(0);\n          }\n          return results;\n        })();\n        this.newCp = (function() {\n          var k, results;\n          results = [];\n          for (x = k = 0; k <= 7; x = ++k) {\n            results.push(0);\n          }\n          return results;\n        })();\n        this.newEp = (function() {\n          var k, results;\n          results = [];\n          for (x = k = 0; k <= 11; x = ++k) {\n            results.push(0);\n          }\n          return results;\n        })();\n        this.newCo = (function() {\n          var k, results;\n          results = [];\n          for (x = k = 0; k <= 7; x = ++k) {\n            results.push(0);\n          }\n          return results;\n        })();\n        this.newEo = (function() {\n          var k, results;\n          results = [];\n          for (x = k = 0; k <= 11; x = ++k) {\n            results.push(0);\n          }\n          return results;\n        })();\n      }\n\n      init(state) {\n        this.center = state.center.slice(0);\n        this.co = state.co.slice(0);\n        this.ep = state.ep.slice(0);\n        this.cp = state.cp.slice(0);\n        return this.eo = state.eo.slice(0);\n      }\n\n      identity() {\n        var x;\n        // Initialize to the identity cube\n        this.center = [0, 1, 2, 3, 4, 5];\n        this.cp = [0, 1, 2, 3, 4, 5, 6, 7];\n        this.co = (function() {\n          var k, results;\n          results = [];\n          for (x = k = 0; k <= 7; x = ++k) {\n            results.push(0);\n          }\n          return results;\n        })();\n        this.ep = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n        return this.eo = (function() {\n          var k, results;\n          results = [];\n          for (x = k = 0; k <= 11; x = ++k) {\n            results.push(0);\n          }\n          return results;\n        })();\n      }\n\n      toJSON() {\n        return {\n          center: this.center,\n          cp: this.cp,\n          co: this.co,\n          ep: this.ep,\n          eo: this.eo\n        };\n      }\n\n      asString() {\n        var corner, edge, i, k, l, m, n, o, ori, p, result;\n        result = [];\n        for (i = k = 0; k <= 5; i = ++k) {\n          result[9 * i + 4] = centerColor[this.center[i]];\n        }\n        for (i = l = 0; l <= 7; i = ++l) {\n          corner = this.cp[i];\n          ori = this.co[i];\n          for (n = m = 0; m <= 2; n = ++m) {\n            result[cornerFacelet[i][(n + ori) % 3]] = cornerColor[corner][n];\n          }\n        }\n        for (i = o = 0; o <= 11; i = ++o) {\n          edge = this.ep[i];\n          ori = this.eo[i];\n          for (n = p = 0; p <= 1; n = ++p) {\n            result[edgeFacelet[i][(n + ori) % 2]] = edgeColor[edge][n];\n          }\n        }\n        return result.join('');\n      }\n\n      static fromString(str) {\n        var col1, col2, cube, i, j, k, l, m, o, ori, p, q, r, ref;\n        cube = new Cube;\n        for (i = k = 0; k <= 5; i = ++k) {\n          for (j = l = 0; l <= 5; j = ++l) {\n            if (str[9 * i + 4] === centerColor[j]) {\n              cube.center[i] = j;\n            }\n          }\n        }\n        for (i = m = 0; m <= 7; i = ++m) {\n          for (ori = o = 0; o <= 2; ori = ++o) {\n            if ((ref = str[cornerFacelet[i][ori]]) === 'U' || ref === 'D') {\n              break;\n            }\n          }\n          col1 = str[cornerFacelet[i][(ori + 1) % 3]];\n          col2 = str[cornerFacelet[i][(ori + 2) % 3]];\n          for (j = p = 0; p <= 7; j = ++p) {\n            if (col1 === cornerColor[j][1] && col2 === cornerColor[j][2]) {\n              cube.cp[i] = j;\n              cube.co[i] = ori % 3;\n            }\n          }\n        }\n        for (i = q = 0; q <= 11; i = ++q) {\n          for (j = r = 0; r <= 11; j = ++r) {\n            if (str[edgeFacelet[i][0]] === edgeColor[j][0] && str[edgeFacelet[i][1]] === edgeColor[j][1]) {\n              cube.ep[i] = j;\n              cube.eo[i] = 0;\n              break;\n            }\n            if (str[edgeFacelet[i][0]] === edgeColor[j][1] && str[edgeFacelet[i][1]] === edgeColor[j][0]) {\n              cube.ep[i] = j;\n              cube.eo[i] = 1;\n              break;\n            }\n          }\n        }\n        return cube;\n      }\n\n      clone() {\n        return new Cube(this.toJSON());\n      }\n\n      // A class method returning a new random cube\n      static random() {\n        return new Cube().randomize();\n      }\n\n      isSolved() {\n        var c, cent, clone, e, k, l, m;\n        clone = this.clone();\n        clone.move(clone.upright());\n        for (cent = k = 0; k <= 5; cent = ++k) {\n          if (clone.center[cent] !== cent) {\n            return false;\n          }\n        }\n        for (c = l = 0; l <= 7; c = ++l) {\n          if (clone.cp[c] !== c) {\n            return false;\n          }\n          if (clone.co[c] !== 0) {\n            return false;\n          }\n        }\n        for (e = m = 0; m <= 11; e = ++m) {\n          if (clone.ep[e] !== e) {\n            return false;\n          }\n          if (clone.eo[e] !== 0) {\n            return false;\n          }\n        }\n        return true;\n      }\n\n      // Multiply this Cube with another Cube, restricted to centers.\n      centerMultiply(other) {\n        var from, k, to;\n        for (to = k = 0; k <= 5; to = ++k) {\n          from = other.center[to];\n          this.newCenter[to] = this.center[from];\n        }\n        [this.center, this.newCenter] = [this.newCenter, this.center];\n        return this;\n      }\n\n      // Multiply this Cube with another Cube, restricted to corners.\n      cornerMultiply(other) {\n        var from, k, to;\n        for (to = k = 0; k <= 7; to = ++k) {\n          from = other.cp[to];\n          this.newCp[to] = this.cp[from];\n          this.newCo[to] = (this.co[from] + other.co[to]) % 3;\n        }\n        [this.cp, this.newCp] = [this.newCp, this.cp];\n        [this.co, this.newCo] = [this.newCo, this.co];\n        return this;\n      }\n\n      // Multiply this Cube with another Cube, restricted to edges\n      edgeMultiply(other) {\n        var from, k, to;\n        for (to = k = 0; k <= 11; to = ++k) {\n          from = other.ep[to];\n          this.newEp[to] = this.ep[from];\n          this.newEo[to] = (this.eo[from] + other.eo[to]) % 2;\n        }\n        [this.ep, this.newEp] = [this.newEp, this.ep];\n        [this.eo, this.newEo] = [this.newEo, this.eo];\n        return this;\n      }\n\n      // Multiply this cube with another Cube\n      multiply(other) {\n        this.centerMultiply(other);\n        this.cornerMultiply(other);\n        this.edgeMultiply(other);\n        return this;\n      }\n\n      move(arg) {\n        var face, k, l, len, move, power, ref, ref1, x;\n        ref = parseAlg(arg);\n        for (k = 0, len = ref.length; k < len; k++) {\n          move = ref[k];\n          face = move / 3 | 0;\n          power = move % 3;\n          for (x = l = 0, ref1 = power; (0 <= ref1 ? l <= ref1 : l >= ref1); x = 0 <= ref1 ? ++l : --l) {\n            this.multiply(Cube.moves[face]);\n          }\n        }\n        return this;\n      }\n\n      upright() {\n        var clone, i, j, k, l, result;\n        clone = this.clone();\n        result = [];\n        for (i = k = 0; k <= 5; i = ++k) {\n          if (clone.center[i] === F) {\n            break;\n          }\n        }\n        switch (i) {\n          case D:\n            result.push(\"x\");\n            break;\n          case U:\n            result.push(\"x'\");\n            break;\n          case B:\n            result.push(\"x2\");\n            break;\n          case R:\n            result.push(\"y\");\n            break;\n          case L:\n            result.push(\"y'\");\n        }\n        if (result.length) {\n          clone.move(result[0]);\n        }\n        for (j = l = 0; l <= 5; j = ++l) {\n          if (clone.center[j] === U) {\n            break;\n          }\n        }\n        switch (j) {\n          case L:\n            result.push(\"z\");\n            break;\n          case R:\n            result.push(\"z'\");\n            break;\n          case D:\n            result.push(\"z2\");\n        }\n        return result.join(' ');\n      }\n\n      static inverse(arg) {\n        var face, k, len, move, power, result, str;\n        result = (function() {\n          var k, len, ref, results;\n          ref = parseAlg(arg);\n          results = [];\n          for (k = 0, len = ref.length; k < len; k++) {\n            move = ref[k];\n            face = move / 3 | 0;\n            power = move % 3;\n            results.push(face * 3 + -(power - 1) + 1);\n          }\n          return results;\n        })();\n        result.reverse();\n        if (typeof arg === 'string') {\n          str = '';\n          for (k = 0, len = result.length; k < len; k++) {\n            move = result[k];\n            face = move / 3 | 0;\n            power = move % 3;\n            str += faceNames[face];\n            if (power === 1) {\n              str += '2';\n            } else if (power === 2) {\n              str += \"'\";\n            }\n            str += ' ';\n          }\n          return str.substring(0, str.length - 1);\n        } else if (arg.length != null) {\n          return result;\n        } else {\n          return result[0];\n        }\n      }\n\n    };\n\n    Cube.prototype.randomize = (function() {\n      var arePermutationsValid, generateValidRandomOrientation, generateValidRandomPermutation, getNumSwaps, isOrientationValid, randint, randomizeOrientation, result, shuffle;\n      randint = function(min, max) {\n        return min + Math.floor(Math.random() * (max - min + 1));\n      };\n      // Fisher-Yates shuffle adapted from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n      shuffle = function(array) {\n        var currentIndex, randomIndex, temporaryValue;\n        currentIndex = array.length;\n        // While there remain elements to shuffle...\n        while (currentIndex !== 0) {\n          // Pick a remaining element...\n          randomIndex = randint(0, currentIndex - 1);\n          currentIndex -= 1;\n          // And swap it with the current element.\n          temporaryValue = array[currentIndex];\n          [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n        }\n      };\n      getNumSwaps = function(arr) {\n        var cur, cycleLength, i, k, numSwaps, ref, seen, x;\n        numSwaps = 0;\n        seen = (function() {\n          var k, ref, results;\n          results = [];\n          for (x = k = 0, ref = arr.length - 1; (0 <= ref ? k <= ref : k >= ref); x = 0 <= ref ? ++k : --k) {\n            results.push(false);\n          }\n          return results;\n        })();\n        while (true) {\n          // We compute the cycle decomposition\n          cur = -1;\n          for (i = k = 0, ref = arr.length - 1; (0 <= ref ? k <= ref : k >= ref); i = 0 <= ref ? ++k : --k) {\n            if (!seen[i]) {\n              cur = i;\n              break;\n            }\n          }\n          if (cur === -1) {\n            break;\n          }\n          cycleLength = 0;\n          while (!seen[cur]) {\n            seen[cur] = true;\n            cycleLength++;\n            cur = arr[cur];\n          }\n          // A cycle is equivalent to cycleLength + 1 swaps\n          numSwaps += cycleLength + 1;\n        }\n        return numSwaps;\n      };\n      arePermutationsValid = function(cp, ep) {\n        var numSwaps;\n        numSwaps = getNumSwaps(ep) + getNumSwaps(cp);\n        return numSwaps % 2 === 0;\n      };\n      generateValidRandomPermutation = function(cp, ep) {\n        // Each shuffle only takes around 12 operations and there's a 50%\n        // chance of a valid permutation so it'll finish in very good time\n        shuffle(ep);\n        shuffle(cp);\n        while (!arePermutationsValid(cp, ep)) {\n          shuffle(ep);\n          shuffle(cp);\n        }\n      };\n      randomizeOrientation = function(arr, numOrientations) {\n        var i, k, ori, ref;\n        ori = 0;\n        for (i = k = 0, ref = arr.length - 1; (0 <= ref ? k <= ref : k >= ref); i = 0 <= ref ? ++k : --k) {\n          ori += (arr[i] = randint(0, numOrientations - 1));\n        }\n      };\n      isOrientationValid = function(arr, numOrientations) {\n        return arr.reduce(function(a, b) {\n          return a + b;\n        }) % numOrientations === 0;\n      };\n      generateValidRandomOrientation = function(co, eo) {\n        // There is a 1/2 and 1/3 probably respectively of each of these\n        // succeeding so the probability of them running 10 times before\n        // success is already only 1% and only gets exponentially lower\n        // and each generation is only in the 10s of operations which is nothing\n        randomizeOrientation(co, 3);\n        while (!isOrientationValid(co, 3)) {\n          randomizeOrientation(co, 3);\n        }\n        randomizeOrientation(eo, 2);\n        while (!isOrientationValid(eo, 2)) {\n          randomizeOrientation(eo, 2);\n        }\n      };\n      result = function() {\n        generateValidRandomPermutation(this.cp, this.ep);\n        generateValidRandomOrientation(this.co, this.eo);\n        return this;\n      };\n      return result;\n    })();\n\n    Cube.moves = [\n      {\n        // U\n        center: [0, 1, 2, 3, 4, 5],\n        cp: [UBR,\n      URF,\n      UFL,\n      ULB,\n      DFR,\n      DLF,\n      DBL,\n      DRB],\n        co: [0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0],\n        ep: [UB,\n      UR,\n      UF,\n      UL,\n      DR,\n      DF,\n      DL,\n      DB,\n      FR,\n      FL,\n      BL,\n      BR],\n        eo: [0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0]\n      },\n      {\n        // R\n        center: [0, 1, 2, 3, 4, 5],\n        cp: [DFR,\n      UFL,\n      ULB,\n      URF,\n      DRB,\n      DLF,\n      DBL,\n      UBR],\n        co: [2,\n      0,\n      0,\n      1,\n      1,\n      0,\n      0,\n      2],\n        ep: [FR,\n      UF,\n      UL,\n      UB,\n      BR,\n      DF,\n      DL,\n      DB,\n      DR,\n      FL,\n      BL,\n      UR],\n        eo: [0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0]\n      },\n      {\n        // F\n        center: [0, 1, 2, 3, 4, 5],\n        cp: [UFL,\n      DLF,\n      ULB,\n      UBR,\n      URF,\n      DFR,\n      DBL,\n      DRB],\n        co: [1,\n      2,\n      0,\n      0,\n      2,\n      1,\n      0,\n      0],\n        ep: [UR,\n      FL,\n      UL,\n      UB,\n      DR,\n      FR,\n      DL,\n      DB,\n      UF,\n      DF,\n      BL,\n      BR],\n        eo: [0,\n      1,\n      0,\n      0,\n      0,\n      1,\n      0,\n      0,\n      1,\n      1,\n      0,\n      0]\n      },\n      {\n        // D\n        center: [0, 1, 2, 3, 4, 5],\n        cp: [URF,\n      UFL,\n      ULB,\n      UBR,\n      DLF,\n      DBL,\n      DRB,\n      DFR],\n        co: [0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0],\n        ep: [UR,\n      UF,\n      UL,\n      UB,\n      DF,\n      DL,\n      DB,\n      DR,\n      FR,\n      FL,\n      BL,\n      BR],\n        eo: [0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0]\n      },\n      {\n        // L\n        center: [0, 1, 2, 3, 4, 5],\n        cp: [URF,\n      ULB,\n      DBL,\n      UBR,\n      DFR,\n      UFL,\n      DLF,\n      DRB],\n        co: [0,\n      1,\n      2,\n      0,\n      0,\n      2,\n      1,\n      0],\n        ep: [UR,\n      UF,\n      BL,\n      UB,\n      DR,\n      DF,\n      FL,\n      DB,\n      FR,\n      UL,\n      DL,\n      BR],\n        eo: [0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0]\n      },\n      {\n        // B\n        center: [0, 1, 2, 3, 4, 5],\n        cp: [URF,\n      UFL,\n      UBR,\n      DRB,\n      DFR,\n      DLF,\n      ULB,\n      DBL],\n        co: [0,\n      0,\n      1,\n      2,\n      0,\n      0,\n      2,\n      1],\n        ep: [UR,\n      UF,\n      UL,\n      BR,\n      DR,\n      DF,\n      DL,\n      BL,\n      FR,\n      FL,\n      UB,\n      DB],\n        eo: [0,\n      0,\n      0,\n      1,\n      0,\n      0,\n      0,\n      1,\n      0,\n      0,\n      1,\n      1]\n      },\n      {\n        // E\n        center: [U,\n      F,\n      L,\n      D,\n      B,\n      R],\n        cp: [URF,\n      UFL,\n      ULB,\n      UBR,\n      DFR,\n      DLF,\n      DBL,\n      DRB],\n        co: [0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0],\n        ep: [UR,\n      UF,\n      UL,\n      UB,\n      DR,\n      DF,\n      DL,\n      DB,\n      FL,\n      BL,\n      BR,\n      FR],\n        eo: [0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      1,\n      1,\n      1]\n      },\n      {\n        // M\n        center: [B,\n      R,\n      U,\n      F,\n      L,\n      D],\n        cp: [URF,\n      UFL,\n      ULB,\n      UBR,\n      DFR,\n      DLF,\n      DBL,\n      DRB],\n        co: [0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0],\n        ep: [UR,\n      UB,\n      UL,\n      DB,\n      DR,\n      UF,\n      DL,\n      DF,\n      FR,\n      FL,\n      BL,\n      BR],\n        eo: [0,\n      1,\n      0,\n      1,\n      0,\n      1,\n      0,\n      1,\n      0,\n      0,\n      0,\n      0]\n      },\n      {\n        // S\n        center: [L,\n      U,\n      F,\n      R,\n      D,\n      B],\n        cp: [URF,\n      UFL,\n      ULB,\n      UBR,\n      DFR,\n      DLF,\n      DBL,\n      DRB],\n        co: [0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0],\n        ep: [UL,\n      UF,\n      DL,\n      UB,\n      UR,\n      DF,\n      DR,\n      DB,\n      FR,\n      FL,\n      BL,\n      BR],\n        eo: [1,\n      0,\n      1,\n      0,\n      1,\n      0,\n      1,\n      0,\n      0,\n      0,\n      0,\n      0]\n      }\n    ];\n\n    faceNums = {\n      U: 0,\n      R: 1,\n      F: 2,\n      D: 3,\n      L: 4,\n      B: 5,\n      E: 6,\n      M: 7,\n      S: 8,\n      x: 9,\n      y: 10,\n      z: 11,\n      u: 12,\n      r: 13,\n      f: 14,\n      d: 15,\n      l: 16,\n      b: 17\n    };\n\n    faceNames = {\n      0: 'U',\n      1: 'R',\n      2: 'F',\n      3: 'D',\n      4: 'L',\n      5: 'B',\n      6: 'E',\n      7: 'M',\n      8: 'S',\n      9: 'x',\n      10: 'y',\n      11: 'z',\n      12: 'u',\n      13: 'r',\n      14: 'f',\n      15: 'd',\n      16: 'l',\n      17: 'b'\n    };\n\n    parseAlg = function(arg) {\n      var k, len, move, part, power, ref, results;\n      if (typeof arg === 'string') {\n        ref = arg.split(/\\s+/);\n        // String\n        results = [];\n        for (k = 0, len = ref.length; k < len; k++) {\n          part = ref[k];\n          if (part.length === 0) {\n            // First and last can be empty\n            continue;\n          }\n          if (part.length > 2) {\n            throw new Error(`Invalid move: ${part}`);\n          }\n          move = faceNums[part[0]];\n          if (move === void 0) {\n            throw new Error(`Invalid move: ${part}`);\n          }\n          if (part.length === 1) {\n            power = 0;\n          } else {\n            if (part[1] === '2') {\n              power = 1;\n            } else if (part[1] === \"'\") {\n              power = 2;\n            } else {\n              throw new Error(`Invalid move: ${part}`);\n            }\n          }\n          results.push(move * 3 + power);\n        }\n        return results;\n      } else if (arg.length != null) {\n        // Already an array\n        return arg;\n      } else {\n        // A single move\n        return [arg];\n      }\n    };\n\n    // x\n    Cube.moves.push(new Cube().move(\"R M' L'\").toJSON());\n\n    // y\n    Cube.moves.push(new Cube().move(\"U E' D'\").toJSON());\n\n    // z\n    Cube.moves.push(new Cube().move(\"F S B'\").toJSON());\n\n    // u\n    Cube.moves.push(new Cube().move(\"U E'\").toJSON());\n\n    // r\n    Cube.moves.push(new Cube().move(\"R M'\").toJSON());\n\n    // f\n    Cube.moves.push(new Cube().move(\"F S\").toJSON());\n\n    // d\n    Cube.moves.push(new Cube().move(\"D E\").toJSON());\n\n    // l\n    Cube.moves.push(new Cube().move(\"L M\").toJSON());\n\n    // b\n    Cube.moves.push(new Cube().move(\"B S'\").toJSON());\n\n    return Cube;\n\n  }).call(this);\n\n  //# Globals\n  if (typeof module !== \"undefined\" && module !== null) {\n    module.exports = Cube;\n  } else {\n    this.Cube = Cube;\n  }\n\n}).call(this);\n"],"names":[],"mappings":"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;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAI;gBACF,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAE;gBACA,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAG;gBACD,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAE;YACF;YACA;gBACE,IAAI;gBACJ,QAAQ;oBAAC;oBAAG;oBAAG;oBAAG;oBAAG;oBAAG;iBAAE;gBAC1B,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAI;gBACF,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAE;gBACA,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAG;gBACD,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAE;YACF;YACA;gBACE,IAAI;gBACJ,QAAQ;oBAAC;oBAAG;oBAAG;oBAAG;oBAAG;oBAAG;iBAAE;gBAC1B,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAI;gBACF,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAE;gBACA,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAG;gBACD,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAE;YACF;YACA;gBACE,IAAI;gBACJ,QAAQ;oBAAC;oBAAG;oBAAG;oBAAG;oBAAG;oBAAG;iBAAE;gBAC1B,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAI;gBACF,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAE;gBACA,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAG;gBACD,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAE;YACF;YACA;gBACE,IAAI;gBACJ,QAAQ;oBAAC;oBAAG;oBAAG;oBAAG;oBAAG;oBAAG;iBAAE;gBAC1B,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAI;gBACF,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAE;gBACA,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAG;gBACD,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAE;YACF;YACA;gBACE,IAAI;gBACJ,QAAQ;oBAAC;oBAAG;oBAAG;oBAAG;oBAAG;oBAAG;iBAAE;gBAC1B,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAI;gBACF,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAE;gBACA,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAG;gBACD,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAE;YACF;YACA;gBACE,IAAI;gBACJ,QAAQ;oBAAC;oBACX;oBACA;oBACA;oBACA;oBACA;iBAAE;gBACA,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAI;gBACF,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAE;gBACA,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAG;gBACD,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAE;YACF;YACA;gBACE,IAAI;gBACJ,QAAQ;oBAAC;oBACX;oBACA;oBACA;oBACA;oBACA;iBAAE;gBACA,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAI;gBACF,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAE;gBACA,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAG;gBACD,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAE;YACF;YACA;gBACE,IAAI;gBACJ,QAAQ;oBAAC;oBACX;oBACA;oBACA;oBACA;oBACA;iBAAE;gBACA,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAI;gBACF,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAE;gBACA,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAG;gBACD,IAAI;oBAAC;oBACP;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAE;YACF;SACD;QAED,WAAW;YACT,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;QACL;QAEA,YAAY;YACV,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;QACN;QAEA,WAAW,SAAS,GAAG;YACrB,IAAI,GAAG,KAAK,MAAM,MAAM,OAAO,KAAK;YACpC,IAAI,OAAO,QAAQ,UAAU;gBAC3B,MAAM,IAAI,KAAK,CAAC;gBAChB,SAAS;gBACT,UAAU,EAAE;gBACZ,IAAK,IAAI,GAAG,MAAM,IAAI,MAAM,EAAE,IAAI,KAAK,IAAK;oBAC1C,OAAO,GAAG,CAAC,EAAE;oBACb,IAAI,KAAK,MAAM,KAAK,GAAG;wBAErB;oBACF;oBACA,IAAI,KAAK,MAAM,GAAG,GAAG;wBACnB,MAAM,IAAI,MAAM,CAAC,cAAc,EAAE,MAAM;oBACzC;oBACA,OAAO,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;oBACxB,IAAI,SAAS,KAAK,GAAG;wBACnB,MAAM,IAAI,MAAM,CAAC,cAAc,EAAE,MAAM;oBACzC;oBACA,IAAI,KAAK,MAAM,KAAK,GAAG;wBACrB,QAAQ;oBACV,OAAO;wBACL,IAAI,IAAI,CAAC,EAAE,KAAK,KAAK;4BACnB,QAAQ;wBACV,OAAO,IAAI,IAAI,CAAC,EAAE,KAAK,KAAK;4BAC1B,QAAQ;wBACV,OAAO;4BACL,MAAM,IAAI,MAAM,CAAC,cAAc,EAAE,MAAM;wBACzC;oBACF;oBACA,QAAQ,IAAI,CAAC,OAAO,IAAI;gBAC1B;gBACA,OAAO;YACT,OAAO,IAAI,IAAI,MAAM,IAAI,MAAM;gBAC7B,mBAAmB;gBACnB,OAAO;YACT,OAAO;gBACL,gBAAgB;gBAChB,OAAO;oBAAC;iBAAI;YACd;QACF;QAEA,IAAI;QACJ,KAAK,KAAK,CAAC,IAAI,CAAC,IAAI,OAAO,IAAI,CAAC,WAAW,MAAM;QAEjD,IAAI;QACJ,KAAK,KAAK,CAAC,IAAI,CAAC,IAAI,OAAO,IAAI,CAAC,WAAW,MAAM;QAEjD,IAAI;QACJ,KAAK,KAAK,CAAC,IAAI,CAAC,IAAI,OAAO,IAAI,CAAC,UAAU,MAAM;QAEhD,IAAI;QACJ,KAAK,KAAK,CAAC,IAAI,CAAC,IAAI,OAAO,IAAI,CAAC,QAAQ,MAAM;QAE9C,IAAI;QACJ,KAAK,KAAK,CAAC,IAAI,CAAC,IAAI,OAAO,IAAI,CAAC,QAAQ,MAAM;QAE9C,IAAI;QACJ,KAAK,KAAK,CAAC,IAAI,CAAC,IAAI,OAAO,IAAI,CAAC,OAAO,MAAM;QAE7C,IAAI;QACJ,KAAK,KAAK,CAAC,IAAI,CAAC,IAAI,OAAO,IAAI,CAAC,OAAO,MAAM;QAE7C,IAAI;QACJ,KAAK,KAAK,CAAC,IAAI,CAAC,IAAI,OAAO,IAAI,CAAC,OAAO,MAAM;QAE7C,IAAI;QACJ,KAAK,KAAK,CAAC,IAAI,CAAC,IAAI,OAAO,IAAI,CAAC,QAAQ,MAAM;QAE9C,OAAO;IAET,CAAC,EAAE,IAAI,CAAC,IAAI;IAEZ,WAAW;IACX,IAAI,+CAAkB,eAAe,WAAW,MAAM;QACpD,OAAO,OAAO,GAAG;IACnB,OAAO;QACL,IAAI,CAAC,IAAI,GAAG;IACd;AAEF,CAAC,EAAE,IAAI,CAAC,IAAI","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1426, "column": 0}, "map": {"version":3,"sources":["file:///Users/minarizk/Downloads/rubiknext/node_modules/cubejs/lib/solve.js"],"sourcesContent":["(function() {\n  var B, BL, BR, Cnk, Cube, D, DB, DBL, DF, DFR, DL, DLF, DR, DRB, F, FL, FR, Include, L, N_FLIP, N_FRtoBR, N_PARITY, N_SLICE1, N_SLICE2, N_TWIST, N_UBtoDF, N_URFtoDLF, N_URtoDF, N_URtoUL, R, U, UB, UBR, UF, UFL, UL, ULB, UR, URF, allMoves1, allMoves2, computeMoveTable, computePruningTable, faceNames, faceNums, factorial, key, max, mergeURtoDF, moveTableParams, nextMoves1, nextMoves2, permutationIndex, pruning, pruningTableParams, rotateLeft, rotateRight, value,\n    indexOf = [].indexOf;\n\n  Cube = this.Cube || require('./cube');\n\n  // Centers\n  [U, R, F, D, L, B] = [0, 1, 2, 3, 4, 5];\n\n  // Corners\n  [URF, UFL, ULB, UBR, DFR, DLF, DBL, DRB] = [0, 1, 2, 3, 4, 5, 6, 7];\n\n  // Edges\n  [UR, UF, UL, UB, DR, DF, DL, DB, FR, FL, BL, BR] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n\n  //# Helpers\n\n  // n choose k, i.e. the binomial coeffiecient\n  Cnk = function(n, k) {\n    var i, j, s;\n    if (n < k) {\n      return 0;\n    }\n    if (k > n / 2) {\n      k = n - k;\n    }\n    s = 1;\n    i = n;\n    j = 1;\n    while (i !== n - k) {\n      s *= i;\n      s /= j;\n      i--;\n      j++;\n    }\n    return s;\n  };\n\n  // n!\n  factorial = function(n) {\n    var f, i, m, ref;\n    f = 1;\n    for (i = m = 2, ref = n; (2 <= ref ? m <= ref : m >= ref); i = 2 <= ref ? ++m : --m) {\n      f *= i;\n    }\n    return f;\n  };\n\n  // Maximum of two values\n  max = function(a, b) {\n    if (a > b) {\n      return a;\n    } else {\n      return b;\n    }\n  };\n\n  // Rotate elements between l and r left by one place\n  rotateLeft = function(array, l, r) {\n    var i, m, ref, ref1, tmp;\n    tmp = array[l];\n    for (i = m = ref = l, ref1 = r - 1; (ref <= ref1 ? m <= ref1 : m >= ref1); i = ref <= ref1 ? ++m : --m) {\n      array[i] = array[i + 1];\n    }\n    return array[r] = tmp;\n  };\n\n  // Rotate elements between l and r right by one place\n  rotateRight = function(array, l, r) {\n    var i, m, ref, ref1, tmp;\n    tmp = array[r];\n    for (i = m = ref = r, ref1 = l + 1; (ref <= ref1 ? m <= ref1 : m >= ref1); i = ref <= ref1 ? ++m : --m) {\n      array[i] = array[i - 1];\n    }\n    return array[l] = tmp;\n  };\n\n  // Generate a function that computes permutation indices.\n\n  // The permutation index actually encodes two indices: Combination,\n  // i.e. positions of the cubies start..end (A) and their respective\n  // permutation (B). The maximum value for B is\n\n  //   maxB = (end - start + 1)!\n\n  // and the index is A * maxB + B\n  permutationIndex = function(context, start, end, fromEnd = false) {\n    var i, maxAll, maxB, maxOur, our, permName;\n    maxOur = end - start;\n    maxB = factorial(maxOur + 1);\n    if (context === 'corners') {\n      maxAll = 7;\n      permName = 'cp';\n    } else {\n      maxAll = 11;\n      permName = 'ep';\n    }\n    our = (function() {\n      var m, ref, results;\n      results = [];\n      for (i = m = 0, ref = maxOur; (0 <= ref ? m <= ref : m >= ref); i = 0 <= ref ? ++m : --m) {\n        results.push(0);\n      }\n      return results;\n    })();\n    return function(index) {\n      var a, b, c, j, k, m, o, p, perm, q, ref, ref1, ref10, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, t, u, w, x, y, z;\n      if (index != null) {\n        for (i = m = 0, ref = maxOur; (0 <= ref ? m <= ref : m >= ref); i = 0 <= ref ? ++m : --m) {\n          // Reset our to [start..end]\n          our[i] = i + start;\n        }\n        b = index % maxB; // permutation\n        a = index / maxB | 0; // combination\n        \n        // Invalidate all edges\n        perm = this[permName];\n        for (i = o = 0, ref1 = maxAll; (0 <= ref1 ? o <= ref1 : o >= ref1); i = 0 <= ref1 ? ++o : --o) {\n          perm[i] = -1;\n        }\n// Generate permutation from index b\n        for (j = p = 1, ref2 = maxOur; (1 <= ref2 ? p <= ref2 : p >= ref2); j = 1 <= ref2 ? ++p : --p) {\n          k = b % (j + 1);\n          b = b / (j + 1) | 0;\n          // TODO: Implement rotateRightBy(our, 0, j, k)\n          while (k > 0) {\n            rotateRight(our, 0, j);\n            k--;\n          }\n        }\n        // Generate combination and set our edges\n        x = maxOur;\n        if (fromEnd) {\n          for (j = q = 0, ref3 = maxAll; (0 <= ref3 ? q <= ref3 : q >= ref3); j = 0 <= ref3 ? ++q : --q) {\n            c = Cnk(maxAll - j, x + 1);\n            if (a - c >= 0) {\n              perm[j] = our[maxOur - x];\n              a -= c;\n              x--;\n            }\n          }\n        } else {\n          for (j = t = ref4 = maxAll; (ref4 <= 0 ? t <= 0 : t >= 0); j = ref4 <= 0 ? ++t : --t) {\n            c = Cnk(j, x + 1);\n            if (a - c >= 0) {\n              perm[j] = our[x];\n              a -= c;\n              x--;\n            }\n          }\n        }\n        return this;\n      } else {\n        perm = this[permName];\n        for (i = u = 0, ref5 = maxOur; (0 <= ref5 ? u <= ref5 : u >= ref5); i = 0 <= ref5 ? ++u : --u) {\n          our[i] = -1;\n        }\n        a = b = x = 0;\n        // Compute the index a < ((maxAll + 1) choose (maxOur + 1)) and\n        // the permutation\n        if (fromEnd) {\n          for (j = w = ref6 = maxAll; (ref6 <= 0 ? w <= 0 : w >= 0); j = ref6 <= 0 ? ++w : --w) {\n            if ((start <= (ref7 = perm[j]) && ref7 <= end)) {\n              a += Cnk(maxAll - j, x + 1);\n              our[maxOur - x] = perm[j];\n              x++;\n            }\n          }\n        } else {\n          for (j = y = 0, ref8 = maxAll; (0 <= ref8 ? y <= ref8 : y >= ref8); j = 0 <= ref8 ? ++y : --y) {\n            if ((start <= (ref9 = perm[j]) && ref9 <= end)) {\n              a += Cnk(j, x + 1);\n              our[x] = perm[j];\n              x++;\n            }\n          }\n        }\n// Compute the index b < (maxOur + 1)! for the permutation\n        for (j = z = ref10 = maxOur; (ref10 <= 0 ? z <= 0 : z >= 0); j = ref10 <= 0 ? ++z : --z) {\n          k = 0;\n          while (our[j] !== start + j) {\n            rotateLeft(our, 0, j);\n            k++;\n          }\n          b = (j + 1) * b + k;\n        }\n        return a * maxB + b;\n      }\n    };\n  };\n\n  Include = {\n    // The twist of the 8 corners, 0 <= twist < 3^7. The orientation of\n    // the DRB corner is fully determined by the orientation of the other\n    // corners.\n    twist: function(twist) {\n      var i, m, o, ori, parity, v;\n      if (twist != null) {\n        parity = 0;\n        for (i = m = 6; m >= 0; i = --m) {\n          ori = twist % 3;\n          twist = (twist / 3) | 0;\n          this.co[i] = ori;\n          parity += ori;\n        }\n        this.co[7] = (3 - parity % 3) % 3;\n        return this;\n      } else {\n        v = 0;\n        for (i = o = 0; o <= 6; i = ++o) {\n          v = 3 * v + this.co[i];\n        }\n        return v;\n      }\n    },\n    // The flip of the 12 edges, 0 <= flip < 2^11. The orientation of the\n    // BR edge is fully determined by the orientation of the other edges.\n    flip: function(flip) {\n      var i, m, o, ori, parity, v;\n      if (flip != null) {\n        parity = 0;\n        for (i = m = 10; m >= 0; i = --m) {\n          ori = flip % 2;\n          flip = flip / 2 | 0;\n          this.eo[i] = ori;\n          parity += ori;\n        }\n        this.eo[11] = (2 - parity % 2) % 2;\n        return this;\n      } else {\n        v = 0;\n        for (i = o = 0; o <= 10; i = ++o) {\n          v = 2 * v + this.eo[i];\n        }\n        return v;\n      }\n    },\n    // Parity of the corner permutation\n    cornerParity: function() {\n      var i, j, m, o, ref, ref1, ref2, ref3, s;\n      s = 0;\n      for (i = m = ref = DRB, ref1 = URF + 1; (ref <= ref1 ? m <= ref1 : m >= ref1); i = ref <= ref1 ? ++m : --m) {\n        for (j = o = ref2 = i - 1, ref3 = URF; (ref2 <= ref3 ? o <= ref3 : o >= ref3); j = ref2 <= ref3 ? ++o : --o) {\n          if (this.cp[j] > this.cp[i]) {\n            s++;\n          }\n        }\n      }\n      return s % 2;\n    },\n    // Parity of the edges permutation. Parity of corners and edges are\n    // the same if the cube is solvable.\n    edgeParity: function() {\n      var i, j, m, o, ref, ref1, ref2, ref3, s;\n      s = 0;\n      for (i = m = ref = BR, ref1 = UR + 1; (ref <= ref1 ? m <= ref1 : m >= ref1); i = ref <= ref1 ? ++m : --m) {\n        for (j = o = ref2 = i - 1, ref3 = UR; (ref2 <= ref3 ? o <= ref3 : o >= ref3); j = ref2 <= ref3 ? ++o : --o) {\n          if (this.ep[j] > this.ep[i]) {\n            s++;\n          }\n        }\n      }\n      return s % 2;\n    },\n    // Permutation of the six corners URF, UFL, ULB, UBR, DFR, DLF\n    URFtoDLF: permutationIndex('corners', URF, DLF),\n    // Permutation of the three edges UR, UF, UL\n    URtoUL: permutationIndex('edges', UR, UL),\n    // Permutation of the three edges UB, DR, DF\n    UBtoDF: permutationIndex('edges', UB, DF),\n    // Permutation of the six edges UR, UF, UL, UB, DR, DF\n    URtoDF: permutationIndex('edges', UR, DF),\n    // Permutation of the equator slice edges FR, FL, BL and BR\n    FRtoBR: permutationIndex('edges', FR, BR, true)\n  };\n\n  for (key in Include) {\n    value = Include[key];\n    Cube.prototype[key] = value;\n  }\n\n  computeMoveTable = function(context, coord, size) {\n    var apply, cube, i, inner, j, k, m, move, o, p, ref, results;\n    // Loop through all valid values for the coordinate, setting cube's\n    // state in each iteration. Then apply each of the 18 moves to the\n    // cube, and compute the resulting coordinate.\n    apply = context === 'corners' ? 'cornerMultiply' : 'edgeMultiply';\n    cube = new Cube;\n    results = [];\n    for (i = m = 0, ref = size - 1; (0 <= ref ? m <= ref : m >= ref); i = 0 <= ref ? ++m : --m) {\n      cube[coord](i);\n      inner = [];\n      for (j = o = 0; o <= 5; j = ++o) {\n        move = Cube.moves[j];\n        for (k = p = 0; p <= 2; k = ++p) {\n          cube[apply](move);\n          inner.push(cube[coord]());\n        }\n        // 4th face turn restores the cube\n        cube[apply](move);\n      }\n      results.push(inner);\n    }\n    return results;\n  };\n\n  // Because we only have the phase 2 URtoDF coordinates, we need to\n  // merge the URtoUL and UBtoDF coordinates to URtoDF in the beginning\n  // of phase 2.\n  mergeURtoDF = (function() {\n    var a, b;\n    a = new Cube;\n    b = new Cube;\n    return function(URtoUL, UBtoDF) {\n      var i, m;\n      // Collisions can be found because unset are set to -1\n      a.URtoUL(URtoUL);\n      b.UBtoDF(UBtoDF);\n      for (i = m = 0; m <= 7; i = ++m) {\n        if (a.ep[i] !== -1) {\n          if (b.ep[i] !== -1) {\n            return -1; // collision\n          } else {\n            b.ep[i] = a.ep[i];\n          }\n        }\n      }\n      return b.URtoDF();\n    };\n  })();\n\n  N_TWIST = 2187; // 3^7 corner orientations\n\n  N_FLIP = 2048; // 2^11 possible edge flips\n\n  N_PARITY = 2; // 2 possible parities\n\n  N_FRtoBR = 11880; // 12!/(12-4)! permutations of FR..BR edges\n\n  N_SLICE1 = 495; // (12 choose 4) possible positions of FR..BR edges\n\n  N_SLICE2 = 24; // 4! permutations of FR..BR edges in phase 2\n\n  N_URFtoDLF = 20160; // 8!/(8-6)! permutations of URF..DLF corners\n\n  \n  // The URtoDF move table is only computed for phase 2 because the full\n  // table would have >650000 entries\n  N_URtoDF = 20160; // 8!/(8-6)! permutation of UR..DF edges in phase 2\n\n  N_URtoUL = 1320; // 12!/(12-3)! permutations of UR..UL edges\n\n  N_UBtoDF = 1320; // 12!/(12-3)! permutations of UB..DF edges\n\n  \n  // The move table for parity is so small that it's included here\n  Cube.moveTables = {\n    parity: [[1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0]],\n    twist: null,\n    flip: null,\n    FRtoBR: null,\n    URFtoDLF: null,\n    URtoDF: null,\n    URtoUL: null,\n    UBtoDF: null,\n    mergeURtoDF: null\n  };\n\n  // Other move tables are computed on the fly\n  moveTableParams = {\n    // name: [scope, size]\n    twist: ['corners', N_TWIST],\n    flip: ['edges', N_FLIP],\n    FRtoBR: ['edges', N_FRtoBR],\n    URFtoDLF: ['corners', N_URFtoDLF],\n    URtoDF: ['edges', N_URtoDF],\n    URtoUL: ['edges', N_URtoUL],\n    UBtoDF: ['edges', N_UBtoDF],\n    mergeURtoDF: []\n  };\n\n  Cube.computeMoveTables = function(...tables) {\n    var len, m, name, scope, size, tableName;\n    if (tables.length === 0) {\n      tables = (function() {\n        var results;\n        results = [];\n        for (name in moveTableParams) {\n          results.push(name);\n        }\n        return results;\n      })();\n    }\n    for (m = 0, len = tables.length; m < len; m++) {\n      tableName = tables[m];\n      if (this.moveTables[tableName] !== null) {\n        // Already computed\n        continue;\n      }\n      if (tableName === 'mergeURtoDF') {\n        this.moveTables.mergeURtoDF = (function() {\n          var UBtoDF, URtoUL, o, results;\n          results = [];\n          for (URtoUL = o = 0; o <= 335; URtoUL = ++o) {\n            results.push((function() {\n              var p, results1;\n              results1 = [];\n              for (UBtoDF = p = 0; p <= 335; UBtoDF = ++p) {\n                results1.push(mergeURtoDF(URtoUL, UBtoDF));\n              }\n              return results1;\n            })());\n          }\n          return results;\n        })();\n      } else {\n        [scope, size] = moveTableParams[tableName];\n        this.moveTables[tableName] = computeMoveTable(scope, tableName, size);\n      }\n    }\n    return this;\n  };\n\n  // Phase 1: All moves are valid\n  allMoves1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17];\n\n  // The list of next valid phase 1 moves when the given face was turned\n  // in the last move\n  nextMoves1 = (function() {\n    var face, lastFace, m, next, o, p, power, results;\n    results = [];\n    for (lastFace = m = 0; m <= 5; lastFace = ++m) {\n      next = [];\n// Don't allow commuting moves, e.g. U U'. Also make sure that\n// opposite faces are always moved in the same order, i.e. allow\n// U D but no D U. This avoids sequences like U D U'.\n      for (face = o = 0; o <= 5; face = ++o) {\n        if (face !== lastFace && face !== lastFace - 3) {\n// single, double or inverse move\n          for (power = p = 0; p <= 2; power = ++p) {\n            next.push(face * 3 + power);\n          }\n        }\n      }\n      results.push(next);\n    }\n    return results;\n  })();\n\n  // Phase 2: Double moves of all faces plus quarter moves of U and D\n  allMoves2 = [0, 1, 2, 4, 7, 9, 10, 11, 13, 16];\n\n  nextMoves2 = (function() {\n    var face, lastFace, len, m, next, o, p, power, powers, results;\n    results = [];\n    for (lastFace = m = 0; m <= 5; lastFace = ++m) {\n      next = [];\n      for (face = o = 0; o <= 5; face = ++o) {\n        if (!(face !== lastFace && face !== lastFace - 3)) {\n          continue;\n        }\n        // Allow all moves of U and D and double moves of others\n        powers = face === 0 || face === 3 ? [0, 1, 2] : [1];\n        for (p = 0, len = powers.length; p < len; p++) {\n          power = powers[p];\n          next.push(face * 3 + power);\n        }\n      }\n      results.push(next);\n    }\n    return results;\n  })();\n\n  // 8 values are encoded in one number\n  pruning = function(table, index, value) {\n    var pos, shift, slot;\n    pos = index % 8;\n    slot = index >> 3;\n    shift = pos << 2;\n    if (value != null) {\n      // Set\n      table[slot] &= ~(0xF << shift);\n      table[slot] |= value << shift;\n      return value;\n    } else {\n      // Get\n      return (table[slot] & (0xF << shift)) >>> shift;\n    }\n  };\n\n  computePruningTable = function(phase, size, currentCoords, nextIndex) {\n    var current, depth, done, index, len, m, move, moves, next, o, ref, table, x;\n    // Initialize all values to 0xF\n    table = (function() {\n      var m, ref, results;\n      results = [];\n      for (x = m = 0, ref = Math.ceil(size / 8) - 1; (0 <= ref ? m <= ref : m >= ref); x = 0 <= ref ? ++m : --m) {\n        results.push(0xFFFFFFFF);\n      }\n      return results;\n    })();\n    if (phase === 1) {\n      moves = allMoves1;\n    } else {\n      moves = allMoves2;\n    }\n    depth = 0;\n    pruning(table, 0, depth);\n    done = 1;\n    // In each iteration, take each state found in the previous depth and\n    // compute the next state. Stop when all states have been assigned a\n    // depth.\n    while (done !== size) {\n      for (index = m = 0, ref = size - 1; (0 <= ref ? m <= ref : m >= ref); index = 0 <= ref ? ++m : --m) {\n        if (!(pruning(table, index) === depth)) {\n          continue;\n        }\n        current = currentCoords(index);\n        for (o = 0, len = moves.length; o < len; o++) {\n          move = moves[o];\n          next = nextIndex(current, move);\n          if (pruning(table, next) === 0xF) {\n            pruning(table, next, depth + 1);\n            done++;\n          }\n        }\n      }\n      depth++;\n    }\n    return table;\n  };\n\n  Cube.pruningTables = {\n    sliceTwist: null,\n    sliceFlip: null,\n    sliceURFtoDLFParity: null,\n    sliceURtoDFParity: null\n  };\n\n  pruningTableParams = {\n    // name: [phase, size, currentCoords, nextIndex]\n    sliceTwist: [\n      1,\n      N_SLICE1 * N_TWIST,\n      function(index) {\n        return [index % N_SLICE1,\n      index / N_SLICE1 | 0];\n      },\n      function(current,\n      move) {\n        var newSlice,\n      newTwist,\n      slice,\n      twist;\n        [slice,\n      twist] = current;\n        newSlice = Cube.moveTables.FRtoBR[slice * 24][move] / 24 | 0;\n        newTwist = Cube.moveTables.twist[twist][move];\n        return newTwist * N_SLICE1 + newSlice;\n      }\n    ],\n    sliceFlip: [\n      1,\n      N_SLICE1 * N_FLIP,\n      function(index) {\n        return [index % N_SLICE1,\n      index / N_SLICE1 | 0];\n      },\n      function(current,\n      move) {\n        var flip,\n      newFlip,\n      newSlice,\n      slice;\n        [slice,\n      flip] = current;\n        newSlice = Cube.moveTables.FRtoBR[slice * 24][move] / 24 | 0;\n        newFlip = Cube.moveTables.flip[flip][move];\n        return newFlip * N_SLICE1 + newSlice;\n      }\n    ],\n    sliceURFtoDLFParity: [\n      2,\n      N_SLICE2 * N_URFtoDLF * N_PARITY,\n      function(index) {\n        return [index % 2,\n      (index / 2 | 0) % N_SLICE2,\n      (index / 2 | 0) / N_SLICE2 | 0];\n      },\n      function(current,\n      move) {\n        var URFtoDLF,\n      newParity,\n      newSlice,\n      newURFtoDLF,\n      parity,\n      slice;\n        [parity,\n      slice,\n      URFtoDLF] = current;\n        newParity = Cube.moveTables.parity[parity][move];\n        newSlice = Cube.moveTables.FRtoBR[slice][move];\n        newURFtoDLF = Cube.moveTables.URFtoDLF[URFtoDLF][move];\n        return (newURFtoDLF * N_SLICE2 + newSlice) * 2 + newParity;\n      }\n    ],\n    sliceURtoDFParity: [\n      2,\n      N_SLICE2 * N_URtoDF * N_PARITY,\n      function(index) {\n        return [index % 2,\n      (index / 2 | 0) % N_SLICE2,\n      (index / 2 | 0) / N_SLICE2 | 0];\n      },\n      function(current,\n      move) {\n        var URtoDF,\n      newParity,\n      newSlice,\n      newURtoDF,\n      parity,\n      slice;\n        [parity,\n      slice,\n      URtoDF] = current;\n        newParity = Cube.moveTables.parity[parity][move];\n        newSlice = Cube.moveTables.FRtoBR[slice][move];\n        newURtoDF = Cube.moveTables.URtoDF[URtoDF][move];\n        return (newURtoDF * N_SLICE2 + newSlice) * 2 + newParity;\n      }\n    ]\n  };\n\n  Cube.computePruningTables = function(...tables) {\n    var len, m, name, params, tableName;\n    if (tables.length === 0) {\n      tables = (function() {\n        var results;\n        results = [];\n        for (name in pruningTableParams) {\n          results.push(name);\n        }\n        return results;\n      })();\n    }\n    for (m = 0, len = tables.length; m < len; m++) {\n      tableName = tables[m];\n      if (this.pruningTables[tableName] !== null) {\n        // Already computed\n        continue;\n      }\n      params = pruningTableParams[tableName];\n      this.pruningTables[tableName] = computePruningTable(...params);\n    }\n    return this;\n  };\n\n  Cube.initSolver = function() {\n    Cube.computeMoveTables();\n    return Cube.computePruningTables();\n  };\n\n  Cube.prototype.solveUpright = function(maxDepth = 22) {\n    var State, freeStates, moveNames, phase1, phase1search, phase2, phase2search, solution, state, x;\n    // Names for all moves, i.e. U, U2, U', F, F2, ...\n    moveNames = (function() {\n      var face, faceName, m, o, power, powerName, result;\n      faceName = ['U', 'R', 'F', 'D', 'L', 'B'];\n      powerName = ['', '2', \"'\"];\n      result = [];\n      for (face = m = 0; m <= 5; face = ++m) {\n        for (power = o = 0; o <= 2; power = ++o) {\n          result.push(faceName[face] + powerName[power]);\n        }\n      }\n      return result;\n    })();\n    State = class State {\n      constructor(cube) {\n        this.parent = null;\n        this.lastMove = null;\n        this.depth = 0;\n        if (cube) {\n          this.init(cube);\n        }\n      }\n\n      init(cube) {\n        // Phase 1 coordinates\n        this.flip = cube.flip();\n        this.twist = cube.twist();\n        this.slice = cube.FRtoBR() / N_SLICE2 | 0;\n        // Phase 2 coordinates\n        this.parity = cube.cornerParity();\n        this.URFtoDLF = cube.URFtoDLF();\n        this.FRtoBR = cube.FRtoBR();\n        // These are later merged to URtoDF when phase 2 begins\n        this.URtoUL = cube.URtoUL();\n        this.UBtoDF = cube.UBtoDF();\n        return this;\n      }\n\n      solution() {\n        if (this.parent) {\n          return this.parent.solution() + moveNames[this.lastMove] + ' ';\n        } else {\n          return '';\n        }\n      }\n\n      //# Helpers\n      move(table, index, move) {\n        return Cube.moveTables[table][index][move];\n      }\n\n      pruning(table, index) {\n        return pruning(Cube.pruningTables[table], index);\n      }\n\n      //# Phase 1\n\n      // Return the next valid phase 1 moves for this state\n      moves1() {\n        if (this.lastMove !== null) {\n          return nextMoves1[this.lastMove / 3 | 0];\n        } else {\n          return allMoves1;\n        }\n      }\n\n      // Compute the minimum number of moves to the end of phase 1\n      minDist1() {\n        var d1, d2;\n        // The maximum number of moves to the end of phase 1 wrt. the\n        // combination flip and slice coordinates only\n        d1 = this.pruning('sliceFlip', N_SLICE1 * this.flip + this.slice);\n        // The combination of twist and slice coordinates\n        d2 = this.pruning('sliceTwist', N_SLICE1 * this.twist + this.slice);\n        // The true minimal distance is the maximum of these two\n        return max(d1, d2);\n      }\n\n      // Compute the next phase 1 state for the given move\n      next1(move) {\n        var next;\n        next = freeStates.pop();\n        next.parent = this;\n        next.lastMove = move;\n        next.depth = this.depth + 1;\n        next.flip = this.move('flip', this.flip, move);\n        next.twist = this.move('twist', this.twist, move);\n        next.slice = this.move('FRtoBR', this.slice * 24, move) / 24 | 0;\n        return next;\n      }\n\n      //# Phase 2\n\n      // Return the next valid phase 2 moves for this state\n      moves2() {\n        if (this.lastMove !== null) {\n          return nextMoves2[this.lastMove / 3 | 0];\n        } else {\n          return allMoves2;\n        }\n      }\n\n      // Compute the minimum number of moves to the solved cube\n      minDist2() {\n        var d1, d2, index1, index2;\n        index1 = (N_SLICE2 * this.URtoDF + this.FRtoBR) * N_PARITY + this.parity;\n        d1 = this.pruning('sliceURtoDFParity', index1);\n        index2 = (N_SLICE2 * this.URFtoDLF + this.FRtoBR) * N_PARITY + this.parity;\n        d2 = this.pruning('sliceURFtoDLFParity', index2);\n        return max(d1, d2);\n      }\n\n      // Initialize phase 2 coordinates\n      init2(top = true) {\n        if (this.parent === null) {\n          return;\n        }\n        // For other states, the phase 2 state is computed based on\n        // parent's state.\n        // Already assigned for the initial state\n        this.parent.init2(false);\n        this.URFtoDLF = this.move('URFtoDLF', this.parent.URFtoDLF, this.lastMove);\n        this.FRtoBR = this.move('FRtoBR', this.parent.FRtoBR, this.lastMove);\n        this.parity = this.move('parity', this.parent.parity, this.lastMove);\n        this.URtoUL = this.move('URtoUL', this.parent.URtoUL, this.lastMove);\n        this.UBtoDF = this.move('UBtoDF', this.parent.UBtoDF, this.lastMove);\n        if (top) {\n          // This is the initial phase 2 state. Get the URtoDF coordinate\n          // by merging URtoUL and UBtoDF\n          return this.URtoDF = this.move('mergeURtoDF', this.URtoUL, this.UBtoDF);\n        }\n      }\n\n      // Compute the next phase 2 state for the given move\n      next2(move) {\n        var next;\n        next = freeStates.pop();\n        next.parent = this;\n        next.lastMove = move;\n        next.depth = this.depth + 1;\n        next.URFtoDLF = this.move('URFtoDLF', this.URFtoDLF, move);\n        next.FRtoBR = this.move('FRtoBR', this.FRtoBR, move);\n        next.parity = this.move('parity', this.parity, move);\n        next.URtoDF = this.move('URtoDF', this.URtoDF, move);\n        return next;\n      }\n\n    };\n    solution = null;\n    phase1search = function(state) {\n      var depth, m, ref, results;\n      depth = 0;\n      results = [];\n      for (depth = m = 1, ref = maxDepth; (1 <= ref ? m <= ref : m >= ref); depth = 1 <= ref ? ++m : --m) {\n        phase1(state, depth);\n        if (solution !== null) {\n          break;\n        }\n        results.push(depth++);\n      }\n      return results;\n    };\n    phase1 = function(state, depth) {\n      var len, m, move, next, ref, ref1, results;\n      if (depth === 0) {\n        if (state.minDist1() === 0) {\n          // Make sure we don't start phase 2 with a phase 2 move as the\n          // last move in phase 1, because phase 2 would then repeat the\n          // same move.\n          if (state.lastMove === null || (ref = state.lastMove, indexOf.call(allMoves2, ref) < 0)) {\n            return phase2search(state);\n          }\n        }\n      } else if (depth > 0) {\n        if (state.minDist1() <= depth) {\n          ref1 = state.moves1();\n          results = [];\n          for (m = 0, len = ref1.length; m < len; m++) {\n            move = ref1[m];\n            next = state.next1(move);\n            phase1(next, depth - 1);\n            freeStates.push(next);\n            if (solution !== null) {\n              break;\n            } else {\n              results.push(void 0);\n            }\n          }\n          return results;\n        }\n      }\n    };\n    phase2search = function(state) {\n      var depth, m, ref, results;\n      // Initialize phase 2 coordinates\n      state.init2();\n      results = [];\n      for (depth = m = 1, ref = maxDepth - state.depth; (1 <= ref ? m <= ref : m >= ref); depth = 1 <= ref ? ++m : --m) {\n        phase2(state, depth);\n        if (solution !== null) {\n          break;\n        }\n        results.push(depth++);\n      }\n      return results;\n    };\n    phase2 = function(state, depth) {\n      var len, m, move, next, ref, results;\n      if (depth === 0) {\n        if (state.minDist2() === 0) {\n          return solution = state.solution();\n        }\n      } else if (depth > 0) {\n        if (state.minDist2() <= depth) {\n          ref = state.moves2();\n          results = [];\n          for (m = 0, len = ref.length; m < len; m++) {\n            move = ref[m];\n            next = state.next2(move);\n            phase2(next, depth - 1);\n            freeStates.push(next);\n            if (solution !== null) {\n              break;\n            } else {\n              results.push(void 0);\n            }\n          }\n          return results;\n        }\n      }\n    };\n    freeStates = (function() {\n      var m, ref, results;\n      results = [];\n      for (x = m = 0, ref = maxDepth + 1; (0 <= ref ? m <= ref : m >= ref); x = 0 <= ref ? ++m : --m) {\n        results.push(new State);\n      }\n      return results;\n    })();\n    state = freeStates.pop().init(this);\n    phase1search(state);\n    freeStates.push(state);\n    // Trim the trailing space\n    if (solution.length > 0) {\n      solution = solution.substring(0, solution.length - 1);\n    }\n    return solution;\n  };\n\n  faceNums = {\n    U: 0,\n    R: 1,\n    F: 2,\n    D: 3,\n    L: 4,\n    B: 5\n  };\n\n  faceNames = {\n    0: 'U',\n    1: 'R',\n    2: 'F',\n    3: 'D',\n    4: 'L',\n    5: 'B'\n  };\n\n  Cube.prototype.solve = function(maxDepth = 22) {\n    var clone, len, m, move, ref, rotation, solution, upright, uprightSolution;\n    clone = this.clone();\n    upright = clone.upright();\n    clone.move(upright);\n    rotation = new Cube().move(upright).center;\n    uprightSolution = clone.solveUpright(maxDepth);\n    solution = [];\n    ref = uprightSolution.split(' ');\n    for (m = 0, len = ref.length; m < len; m++) {\n      move = ref[m];\n      solution.push(faceNames[rotation[faceNums[move[0]]]]);\n      if (move.length > 1) {\n        solution[solution.length - 1] += move[1];\n      }\n    }\n    return solution.join(' ');\n  };\n\n  Cube.scramble = function() {\n    return Cube.inverse(Cube.random().solve());\n  };\n\n}).call(this);\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2439, "column": 0}, "map": {"version":3,"sources":["file:///Users/minarizk/Downloads/rubiknext/node_modules/cubejs/index.js"],"sourcesContent":["module.exports = require('./lib/cube');\nrequire('./lib/solve');\n"],"names":[],"mappings":"AAAA,OAAO,OAAO","ignoreList":[0],"debugId":null}}]
}