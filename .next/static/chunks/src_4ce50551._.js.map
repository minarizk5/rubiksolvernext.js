{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/minarizk/Downloads/rubiknext/src/components/ColorPicker.tsx"],"sourcesContent":["import { Color } from '@/types/cube';\n\ninterface ColorPickerProps {\n  selectedColor: Color;\n  onColorSelect: (color: Color) => void;\n}\n\nconst COLORS: { color: Color; background: string; label: string }[] = [\n  { color: 'W', background: 'bg-cube-white', label: 'White' },\n  { color: 'Y', background: 'bg-cube-yellow', label: 'Yellow' },\n  { color: 'R', background: 'bg-cube-red', label: 'Red' },\n  { color: 'O', background: 'bg-cube-orange', label: 'Orange' },\n  { color: 'B', background: 'bg-cube-blue', label: 'Blue' },\n  { color: 'G', background: 'bg-cube-green', label: 'Green' },\n];\n\nexport default function ColorPicker({ selectedColor, onColorSelect }: ColorPickerProps) {\n  return (\n    <div className=\"bg-black p-6 rounded-xl shadow-lg border border-gray-800\">\n      <h3 className=\"text-lg font-medium text-white mb-4 flex items-center gap-2\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"text-primary\">\n          <circle cx=\"13.5\" cy=\"6.5\" r=\"2.5\"/>\n          <circle cx=\"17.5\" cy=\"10.5\" r=\"2.5\"/>\n          <circle cx=\"8.5\" cy=\"7.5\" r=\"2.5\"/>\n          <circle cx=\"6.5\" cy=\"12.5\" r=\"2.5\"/>\n        </svg>\n        Select a Color\n      </h3>\n      \n      <div className=\"grid grid-cols-3 gap-4\">\n        {COLORS.map(({ color, background, label }) => (\n          <button\n            key={color}\n            onClick={() => onColorSelect(color)}\n            className=\"relative group focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 focus:ring-offset-black\"\n            aria-label={`Select ${label} color`}\n          >\n            <div\n              className={`\n                aspect-square rounded-lg transition-all duration-200 \n                ${background} border-2 border-gray-800\n                ${selectedColor === color \n                  ? 'ring-4 ring-primary ring-offset-4 scale-110 shadow-lg' \n                  : 'hover:scale-105 hover:shadow-md'}\n              `}\n              style={{width: '50px', height: '50px'}}\n            >\n              {selectedColor === color && (\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-8 w-8 text-white drop-shadow-md\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                    <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                  </svg>\n                </div>\n              )}\n            </div>\n            <span className=\"block text-sm font-medium text-center mt-2 text-white\">\n              {label}\n            </span>\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":";;;;;AAOA,MAAM,SAAgE;IACpE;QAAE,OAAO;QAAK,YAAY;QAAiB,OAAO;IAAQ;IAC1D;QAAE,OAAO;QAAK,YAAY;QAAkB,OAAO;IAAS;IAC5D;QAAE,OAAO;QAAK,YAAY;QAAe,OAAO;IAAM;IACtD;QAAE,OAAO;QAAK,YAAY;QAAkB,OAAO;IAAS;IAC5D;QAAE,OAAO;QAAK,YAAY;QAAgB,OAAO;IAAO;IACxD;QAAE,OAAO;QAAK,YAAY;QAAiB,OAAO;IAAQ;CAC3D;AAEc,SAAS,YAAY,EAAE,aAAa,EAAE,aAAa,EAAoB;IACpF,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAG,WAAU;;kCACZ,6LAAC;wBAAI,OAAM;wBAA6B,OAAM;wBAAK,QAAO;wBAAK,SAAQ;wBAAY,MAAK;wBAAO,QAAO;wBAAe,aAAY;wBAAI,eAAc;wBAAQ,gBAAe;wBAAQ,WAAU;;0CAC1L,6LAAC;gCAAO,IAAG;gCAAO,IAAG;gCAAM,GAAE;;;;;;0CAC7B,6LAAC;gCAAO,IAAG;gCAAO,IAAG;gCAAO,GAAE;;;;;;0CAC9B,6LAAC;gCAAO,IAAG;gCAAM,IAAG;gCAAM,GAAE;;;;;;0CAC5B,6LAAC;gCAAO,IAAG;gCAAM,IAAG;gCAAO,GAAE;;;;;;;;;;;;oBACzB;;;;;;;0BAIR,6LAAC;gBAAI,WAAU;0BACZ,OAAO,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,iBACvC,6LAAC;wBAEC,SAAS,IAAM,cAAc;wBAC7B,WAAU;wBACV,cAAY,CAAC,OAAO,EAAE,MAAM,MAAM,CAAC;;0CAEnC,6LAAC;gCACC,WAAW,CAAC;;gBAEV,EAAE,WAAW;gBACb,EAAE,kBAAkB,QAChB,0DACA,kCAAkC;cACxC,CAAC;gCACD,OAAO;oCAAC,OAAO;oCAAQ,QAAQ;gCAAM;0CAEpC,kBAAkB,uBACjB,6LAAC;oCAAI,WAAU;8CACb,cAAA,6LAAC;wCAAI,OAAM;wCAA6B,WAAU;wCAAoC,SAAQ;wCAAY,MAAK;kDAC7G,cAAA,6LAAC;4CAAK,UAAS;4CAAU,GAAE;4CAAqH,UAAS;;;;;;;;;;;;;;;;;;;;;0CAKjK,6LAAC;gCAAK,WAAU;0CACb;;;;;;;uBAxBE;;;;;;;;;;;;;;;;AA+BjB;KA/CwB","debugId":null}},
    {"offset": {"line": 213, "column": 0}, "map": {"version":3,"sources":["file:///Users/minarizk/Downloads/rubiknext/src/utils/cubeSolver.ts"],"sourcesContent":["import { CubeState, Move, Face, Color } from '@/types/cube';\nimport Cube from 'cubejs';\n\n// Define the facelet order expected by cubejs (U, R, F, D, L, B)\nconst faceletOrder: Face[] = ['U', 'R', 'F', 'D', 'L', 'B'];\nconst colorToFacelet: Record<Color, string> = {\n  W: 'U', R: 'R', G: 'F', Y: 'D', O: 'L', B: 'B'\n};\nconst faceletToColor: Record<string, Color> = {\n  U: 'W', R: 'R', F: 'G', D: 'Y', L: 'O', B: 'B'\n};\n\n// A mapping to convert face letters to more understandable names\nconst faceToDescription: Record<string, string> = {\n  'U': 'top',\n  'D': 'bottom',\n  'F': 'front',\n  'B': 'back',\n  'L': 'left',\n  'R': 'right'\n};\n\n// A mapping to convert move notation to user-friendly descriptions\nconst moveToDirection: Record<string, string> = {\n  '': 'clockwise',\n  \"'\": 'counterclockwise',\n  '2': 'twice'\n};\n\n// Helper to convert our CubeState to cubejs facelet string\nfunction stateToFaceletString(state: CubeState): string {\n  let str = '';\n  for (const face of faceletOrder) {\n    for (const color of state[face]) {\n      str += colorToFacelet[color];\n    }\n  }\n  return str;\n}\n\n// Helper to convert cubejs facelet string back to our CubeState\n// (Potentially useful, but not strictly needed for solving)\nfunction faceletStringToState(faceletString: string): CubeState {\n    const state: Partial<Record<Face, Color[]>> = {};\n    let index = 0;\n    for (const face of faceletOrder) {\n        state[face] = [];\n        for (let i = 0; i < 9; i++) {\n            state[face]!.push(faceletToColor[faceletString[index++]]);\n        }\n    }\n    return state as CubeState;\n}\n\nexport class CubeSolver {\n  private state: CubeState;\n  private cubejsInstance: any | null = null;\n  private static solverInitialized: boolean = false;\n  private static solverInitializing: boolean = false;\n  private solution: Move[] = []; // Stores the full solution sequence\n\n  // --- Public static getters for initialization status ---\n  public static isEngineInitialized(): boolean {\n    return CubeSolver.solverInitialized;\n  }\n\n  public static isEngineInitializing(): boolean {\n    return CubeSolver.solverInitializing;\n  }\n  // --- End of status getters ---\n\n  constructor(initialState: CubeState) {\n    if (!CubeSolver.isValidState(initialState)) {\n      throw new Error(\"Invalid or unsolvable cube state provided.\");\n    }\n    \n    this.state = JSON.parse(JSON.stringify(initialState)); // Deep copy\n    \n    try {\n      this.initializeCubejsInstance();\n      if (!this.cubejsInstance) {\n        throw new Error(\"Failed to initialize cube solver instance\");\n      }\n    } catch (error) {\n      console.error(\"Failed to create cube solver:\", error);\n      throw new Error(\"The cube state appears invalid or unsolvable. Please check your input.\");\n    }\n\n    // Don't call ensureSolverInitialized here\n    // Instead, ensure it's called before solve operation\n  }\n\n  // Static method to initialize Kociemba tables (can take a few seconds)\n  static async initializeSolver(): Promise<void> {\n    if (CubeSolver.solverInitialized || CubeSolver.solverInitializing) return;\n\n    console.log(\"Initializing Kociemba solver tables...\");\n    CubeSolver.solverInitializing = true;\n    \n    return new Promise<void>((resolve, reject) => {\n      // Use requestAnimationFrame to defer the work and avoid freezing the UI\n      requestAnimationFrame(() => {\n        try {\n          // Break up the computation with setTimeout to allow UI updates\n          setTimeout(() => {\n            try {\n              Cube.initSolver();\n              console.log(\"Solver initialized.\");\n              CubeSolver.solverInitialized = true;\n              CubeSolver.solverInitializing = false;\n              resolve();\n            } catch (e) {\n              console.error(\"Failed to initialize solver:\", e);\n              CubeSolver.solverInitializing = false;\n              reject(new Error(\"Solver initialization failed\"));\n            }\n          }, 0);\n        } catch (e) {\n          console.error(\"Failed to schedule solver initialization:\", e);\n          CubeSolver.solverInitializing = false;\n          reject(new Error(\"Failed to schedule solver initialization\"));\n        }\n      });\n    });\n  }\n\n  // Ensure solver is initialized before solving\n  static async ensureSolverInitialized(): Promise<void> {\n    if (!CubeSolver.solverInitialized && !CubeSolver.solverInitializing) {\n      await CubeSolver.initializeSolver();\n    } else if (CubeSolver.solverInitializing) {\n      await new Promise<void>((resolve, reject) => {\n        const interval = setInterval(() => {\n          if (CubeSolver.solverInitialized) {\n            clearInterval(interval);\n            resolve();\n          } else if (!CubeSolver.solverInitializing) {\n              // Check if it stopped initializing without becoming initialized (error)\n              clearInterval(interval);\n              reject(new Error(\"Solver initialization failed while waiting.\"));\n          }\n        }, 100);\n      });\n    }\n  }\n\n  private initializeCubejsInstance() {\n      try {\n          const faceletString = stateToFaceletString(this.state);\n          this.cubejsInstance = Cube.fromString(faceletString);\n      } catch(e) {\n          console.error(\"Failed to create cubejs instance from state:\", e);\n          console.error(\"State:\", JSON.stringify(this.state));\n          // Handle error - perhaps the state is invalid despite passing initial check?\n          this.cubejsInstance = null;\n      }\n  }\n\n  // Solve the cube with improved handling to prevent UI freezing\n  async solve(): Promise<string[]> {\n    // First ensure solver is initialized\n    await CubeSolver.ensureSolverInitialized();\n    \n    if (!this.cubejsInstance) {\n      throw new Error(\"Cube solver not properly initialized\");\n    }\n\n    // This uses Web Workers if available, otherwise falls back to chunked execution\n    return this.solveWithChunkedExecution();\n  }\n\n  /**\n   * NEW METHOD: Converts a solution to beginner-friendly instructions\n   * @param solution Array of standard cube notation moves\n   * @returns Array of user-friendly instruction objects with descriptions and visuals\n   */\n  static getBeginnerFriendlyInstructions(solution: string[]): { \n    move: string; \n    description: string;\n    longDescription: string;\n  }[] {\n    return solution.map(move => {\n      // Parse the move into face and direction\n      const face = move.charAt(0) as Face;\n      const modifier = move.slice(1); // '', \"'\", or \"2\"\n      \n      // Create user-friendly descriptions\n      const faceName = faceToDescription[face];\n      const direction = moveToDirection[modifier];\n      \n      // Short description (e.g., \"Turn Right clockwise\")\n      const description = `Turn ${faceName} ${direction}`;\n      \n      // Longer description with more guidance\n      let longDescription = ``;\n      \n      // Add more detailed instructions based on the face\n      if (face === 'U') {\n        longDescription = `Hold the cube so you can see the top face. Rotate the top face ${direction}.`;\n      } else if (face === 'D') {\n        longDescription = `Hold the cube so you can see the bottom face. Rotate the bottom face ${direction}.`;\n      } else if (face === 'F') {\n        longDescription = `Looking at the front of the cube, rotate the front face ${direction}.`;\n      } else if (face === 'B') {\n        longDescription = `Turn the cube around so the back face is facing you, then rotate it ${direction}.`;\n      } else if (face === 'L') {\n        longDescription = `Looking at the front of the cube, rotate the left face ${direction}.`;\n      } else if (face === 'R') {\n        longDescription = `Looking at the front of the cube, rotate the right face ${direction}.`;\n      }\n      \n      // Handle \"twice\" direction with clearer instructions\n      if (modifier === '2') {\n        longDescription += \" This means turning it 180 degrees (a half-turn).\";\n      }\n      \n      return {\n        move,\n        description,\n        longDescription\n      };\n    });\n  }\n\n  /**\n   * Groups solution moves into logical chunks for easier understanding\n   * @param solution Array of standard cube notation moves\n   * @returns Array of move groups with descriptions\n   */\n  static getGroupedSolution(solution: string[]): {\n    moves: string[];\n    description: string;\n  }[] {\n    const result = [];\n    \n    // Group the solution into chunks of 3-4 moves for easier digestion\n    for (let i = 0; i < solution.length; i += 3) {\n      const chunk = solution.slice(i, i + 3);\n      result.push({\n        moves: chunk,\n        description: `Step ${Math.floor(i/3) + 1}: Apply these ${chunk.length} moves`\n      });\n    }\n    \n    return result;\n  }\n\n  // Implementation of solve that breaks computation into chunks to prevent UI freeze\n  private solveWithChunkedExecution(): Promise<string[]> {\n    return new Promise<string[]>((resolve, reject) => {\n      console.log(\"Starting solution calculation...\");\n      \n      // Check if Web Workers are available (modern browsers)\n      if (typeof Worker !== 'undefined') {\n        // Use a worker to offload the calculation entirely\n        this.solveWithWebWorker(resolve, reject);\n      } else {\n        // Fallback to chunked execution with very small work batches\n        this.solveWithTimeSlicing(resolve, reject);\n      }\n      \n      // Set a maximum timeout to prevent infinite loops (30 seconds)\n      setTimeout(() => {\n        reject(new Error(\"Solving timed out after 30 seconds. The cube may be too complex or in an invalid state.\"));\n      }, 30000);\n    });\n  }\n  \n  // Solve using a web worker (best option for preventing UI freeze)\n  private solveWithWebWorker(resolve: (value: string[]) => void, reject: (reason: any) => void): void {\n    try {\n      // Use a dynamic import for the worker using the Next.js worker strategy\n      if (typeof window !== 'undefined') {\n        // We're in the browser environment\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const worker = new Worker(new URL('./cube.worker.ts', import.meta.url) as any);\n        \n        // Set up message handler\n        worker.onmessage = (e) => {\n          if (e.data.type === 'status') {\n            console.log('Worker status:', e.data.message);\n            return;\n          }\n          \n          if (e.data.type === 'solution') {\n            // Clean up\n            worker.terminate();\n            \n            if (e.data.success) {\n              console.log(\"Solution found in web worker\");\n              resolve(this.formatSolution(e.data.solution));\n            } else {\n              console.error(\"Worker error:\", e.data.error);\n              reject(new Error(e.data.error));\n            }\n          }\n          \n          if (e.data.type === 'error') {\n            // Clean up\n            worker.terminate();\n            \n            console.error(\"Worker error:\", e.data.error);\n            reject(new Error(e.data.error));\n          }\n        };\n        \n        // Set up error handler\n        worker.onerror = (e) => {\n          // Clean up\n          worker.terminate();\n          \n          console.error(\"Worker error:\", e);\n          reject(new Error(\"Worker failed: \" + e.message));\n        };\n        \n        // Send the cube state to the worker\n        worker.postMessage({\n          cubeState: stateToFaceletString(this.state)\n        });\n      } else {\n        // We're in a server-side rendering context, fall back to the non-worker implementation\n        this.solveWithTimeSlicing(resolve, reject);\n      }\n    } catch (e) {\n      console.error(\"Failed to create web worker, falling back to time slicing:\", e);\n      // Fallback to chunked execution\n      this.solveWithTimeSlicing(resolve, reject);\n    }\n  }\n  \n  // Fallback method using time slicing for older browsers\n  private solveWithTimeSlicing(resolve: (value: string[]) => void, reject: (reason: any) => void): void {\n    // Store the instance for use in callbacks\n    const cubeInstance = this.cubejsInstance;\n    \n    // Set a flag to indicate we're calculating\n    let isSolving = true;\n    let attempts = 0;\n    const MAX_ATTEMPTS = 20; // Limit the number of solution attempts\n    \n    // Function to be executed in small chunks\n    const executeChunk = () => {\n      if (!isSolving || attempts >= MAX_ATTEMPTS) {\n        if (attempts >= MAX_ATTEMPTS) {\n          isSolving = false;\n          reject(new Error(\"Failed to solve after maximum attempts. The cube may be too complex.\"));\n        }\n        return;\n      }\n      \n      attempts++;\n      \n      try {\n        // Only give a very small time slice to the calculation\n        // Then yield back to the UI thread\n        console.log(`Attempting solution calculation: attempt ${attempts}/${MAX_ATTEMPTS}`);\n        \n        // We need to wrap the synchronous solve() call in a way that doesn't block UI\n        // Use a minimal approach: try to solve quickly, then yield to UI\n        \n        // Set up a promise that resolves after a UI frame\n        const yieldToUI = () => new Promise(resolve => {\n          // First yield with setTimeout (macrotask)\n          setTimeout(() => {\n            // Then with requestAnimationFrame (before next paint)\n            requestAnimationFrame(() => {\n              resolve(null);\n            });\n          }, 0);\n        });\n        \n        // Function to solve in chunks\n        const solveWithYield = async () => {\n          if (!isSolving) return;\n          \n          try {\n            // Try to solve with current settings\n            const startTime = performance.now();\n            const solution = cubeInstance.solve();\n            const elapsed = performance.now() - startTime;\n            \n            console.log(`Solution found in ${elapsed.toFixed(2)}ms on attempt ${attempts}`);\n            isSolving = false;\n            resolve(this.formatSolution(solution));\n          } catch (e) {\n            const error = e as Error;\n            \n            // If it's a genuine error, reject\n            if (error.message && error.message.includes(\"unsolvable\")) {\n              console.error(\"Cube appears to be unsolvable:\", error);\n              isSolving = false;\n              reject(new Error(\"The cube state appears to be invalid or unsolvable.\"));\n              return;\n            }\n            \n            // Otherwise yield to UI and try again\n            await yieldToUI();\n            \n            if (isSolving && attempts < MAX_ATTEMPTS) {\n              // Schedule next attempt with a longer delay as attempts increase\n              // This gives UI more time to be responsive between attempts\n              const delay = Math.min(50 * attempts, 500);\n              setTimeout(() => {\n                executeChunk();\n              }, delay);\n            }\n          }\n        };\n        \n        // Start the solve process\n        solveWithYield();\n      } catch (error) {\n        // Handle any synchronous errors\n        console.error(\"Error in solution chunk:\", error);\n        \n        if (isSolving && attempts < MAX_ATTEMPTS) {\n          // Try again after a delay\n          setTimeout(() => {\n            executeChunk();\n          }, 100);\n        } else {\n          isSolving = false;\n          reject(new Error(\"Failed to calculate solution: \" + (error as Error).message));\n        }\n      }\n    };\n    \n    // Start the first chunk after a short delay\n    setTimeout(() => {\n      executeChunk();\n    }, 10);\n  }\n\n  /**\n   * Formats the solution string returned by cubejs into an array of move notations\n   */\n  private formatSolution(solutionString: string): string[] {\n    if (!solutionString) {\n      return [];\n    }\n    \n    // Convert the solution string (e.g., \"U F R2 B'\") to string array\n    return solutionString.trim().split(/\\s+/).filter(Boolean);\n  }\n\n  // Get the stored solution\n  getSolution(): Move[] {\n    return [...this.solution]; // Return a copy\n  }\n\n  // Public getter for the current state\n  getState(): CubeState {\n    // Return a deep copy to prevent external modification\n    return JSON.parse(JSON.stringify(this.state));\n  }\n\n  // --- Core Cube State and Manipulation ---\n  // (Keep applyMove, rotateFace, getRotationMap, isValidState)\n\n  // Updates the internal state AND the cubejsInstance\n  private updateState(newState: CubeState) {\n    this.state = newState; // Keep our state representation\n    this.initializeCubejsInstance(); // Re-sync cubejs instance\n  }\n\n  // Applies a move to both our state and the cubejs instance\n  applyMove(move: Move) {\n    if (!this.cubejsInstance) {\n      console.warn(\"Cannot apply move: cubejs instance not available.\");\n      return;\n    }\n\n    const face = move[0] as Face;\n    const isCounterClockwise = move.includes(\"'\");\n    const isDouble = move.includes(\"2\");\n    \n    // Apply to our state representation (for potential display/validation)\n    const newState = JSON.parse(JSON.stringify(this.state));\n    if (isDouble) {\n      this.rotateFace(face, newState);\n      this.rotateFace(face, newState);\n    } else {\n      this.rotateFace(face, newState, isCounterClockwise);\n    }\n    this.state = newState; // Update our state directly\n\n\n    // Apply to cubejs instance (important for subsequent solves)\n    try {\n        this.cubejsInstance.move(move);\n    } catch (e) {\n        console.error(`Error applying move \"${move}\" to cubejs instance:`, e);\n        // Attempt to resync cubejs instance from our state\n        this.initializeCubejsInstance();\n    }\n  }\n\n  // Rotates a single face (Helper for applyMove) - Keep this logic\n  private rotateFace(face: Face, state: CubeState, counterClockwise: boolean = false) {\n    const faceStickers = [...state[face]];\n    if (counterClockwise) {\n      state[face][0] = faceStickers[2]; state[face][1] = faceStickers[5]; state[face][2] = faceStickers[8];\n      state[face][3] = faceStickers[1]; state[face][5] = faceStickers[7];\n      state[face][6] = faceStickers[0]; state[face][7] = faceStickers[3]; state[face][8] = faceStickers[6];\n    } else {\n      state[face][0] = faceStickers[6]; state[face][1] = faceStickers[3]; state[face][2] = faceStickers[0];\n      state[face][3] = faceStickers[7]; state[face][5] = faceStickers[1];\n      state[face][6] = faceStickers[8]; state[face][7] = faceStickers[5]; state[face][8] = faceStickers[2];\n    }\n\n    const rotations = this.getRotationMap(face);\n    const tempState = JSON.parse(JSON.stringify(state));\n\n    rotations.forEach(([[fromFace, fromIdx], [toFace, toIdx]]) => {\n      const [actualFromFace, actualFromIdx] = counterClockwise ? [toFace, toIdx] : [fromFace, fromIdx];\n      const [actualToFace, actualToIdx]    = counterClockwise ? [fromFace, fromIdx] : [toFace, toIdx];\n      state[actualToFace][actualToIdx] = tempState[actualFromFace][actualFromIdx];\n    });\n  }\n\n  // Provides the sticker mapping for rotations - Keep this logic\n  private getRotationMap(face: Face): [Face, number][][] {\n     const maps: Record<Face, [[Face, number], [Face, number]][]> = {\n            U: [\n                [['B', 0], ['R', 0]], [['B', 1], ['R', 1]], [['B', 2], ['R', 2]], // B012 -> R012\n                [['R', 0], ['F', 0]], [['R', 1], ['F', 1]], [['R', 2], ['F', 2]], // R012 -> F012\n                [['F', 0], ['L', 0]], [['F', 1], ['L', 1]], [['F', 2], ['L', 2]], // F012 -> L012\n                [['L', 0], ['B', 0]], [['L', 1], ['B', 1]], [['L', 2], ['B', 2]], // L012 -> B012\n            ],\n            D: [ // Note: D affects indices 6, 7, 8\n                [['F', 6], ['L', 6]], [['F', 7], ['L', 7]], [['F', 8], ['L', 8]], // F678 -> L678\n                [['L', 6], ['B', 6]], [['L', 7], ['B', 7]], [['L', 8], ['B', 8]], // L678 -> B678\n                [['B', 6], ['R', 6]], [['B', 7], ['R', 7]], [['B', 8], ['R', 8]], // B678 -> R678\n                [['R', 6], ['F', 6]], [['R', 7], ['F', 7]], [['R', 8], ['F', 8]], // R678 -> F678\n      ],\n      F: [\n                [['U', 6], ['L', 8]], [['U', 7], ['L', 5]], [['U', 8], ['L', 2]], // U678 -> L852 (rev)\n                [['L', 8], ['D', 2]], [['L', 5], ['D', 1]], [['L', 2], ['D', 0]], // L852 -> D210 (rev)\n                [['D', 2], ['R', 0]], [['D', 1], ['R', 3]], [['D', 0], ['R', 6]], // D210 -> R036\n                [['R', 0], ['U', 6]], [['R', 3], ['U', 7]], [['R', 6], ['U', 8]], // R036 -> U678\n            ],\n            B: [ // Affects U012, R258, D876, L630\n                [['U', 0], ['R', 2]], [['U', 1], ['R', 5]], [['U', 2], ['R', 8]], // U012 -> R258\n                [['R', 2], ['D', 8]], [['R', 5], ['D', 7]], [['R', 8], ['D', 6]], // R258 -> D876 (rev)\n                [['D', 8], ['L', 6]], [['D', 7], ['L', 3]], [['D', 6], ['L', 0]], // D876 -> L630 (rev)\n                [['L', 6], ['U', 0]], [['L', 3], ['U', 1]], [['L', 0], ['U', 2]], // L630 -> U012\n            ],\n            L: [ // Affects U036, B852, D036, F036\n                [['U', 0], ['B', 8]], [['U', 3], ['B', 5]], [['U', 6], ['B', 2]], // U036 -> B852 (rev)\n                [['B', 8], ['D', 0]], [['B', 5], ['D', 3]], [['B', 2], ['D', 6]], // B852 -> D036\n                [['D', 0], ['F', 0]], [['D', 3], ['F', 3]], [['D', 6], ['F', 6]], // D036 -> F036\n                [['F', 0], ['U', 0]], [['F', 3], ['U', 3]], [['F', 6], ['U', 6]], // F036 -> U036\n            ],\n            R: [ // Affects U852, F852, D852, B036\n                [['U', 2], ['F', 2]], [['U', 5], ['F', 5]], [['U', 8], ['F', 8]], // U258 -> F258\n                [['F', 2], ['D', 2]], [['F', 5], ['D', 5]], [['F', 8], ['D', 8]], // F258 -> D258\n                [['D', 2], ['B', 6]], [['D', 5], ['B', 3]], [['D', 8], ['B', 0]], // D258 -> B630 (rev)\n                [['B', 6], ['U', 2]], [['B', 3], ['U', 5]], [['B', 0], ['U', 8]], // B630 -> U258\n            ],\n        };\n    // The maps define clockwise rotation [from, to].\n    // We need to adjust the indices based on counterClockwise flag during application.\n    // The structure returns [[from, to], [from, to], ...] pairs for clockwise rotation.\n    return maps[face];\n  }\n\n\n  // Validates the structure and color counts - Keep this logic\n  static isValidState(state: CubeState): boolean {\n    // First check basic structure\n    if (!state || typeof state !== 'object') {\n      console.error(\"Invalid state: Cube state is null or not an object.\");\n      return false;\n    }\n    \n    const requiredFaces: Face[] = ['U', 'D', 'L', 'R', 'F', 'B'];\n    if (!requiredFaces.every(face => Array.isArray(state[face]) && state[face].length === 9)) {\n      console.error(\"Invalid state: Missing faces or incorrect facelet count.\");\n      return false;\n    }\n\n    // Check color counts\n    const colorCounts: Record<Color, number> = { W: 0, Y: 0, R: 0, O: 0, B: 0, G: 0 };\n    let totalCount = 0;\n    \n    for (const face of requiredFaces) {\n      for (const color of state[face]) {\n        if (!(color in colorCounts)) {\n          console.error(`Invalid state: Unknown color '${color}' found on face ${face}.`);\n          return false; // Invalid color found\n        }\n        colorCounts[color as Color]++;\n        totalCount++;\n      }\n    }\n\n    if (totalCount !== 54) {\n      console.error(`Invalid state: Total facelets count is ${totalCount}, expected 54.`);\n      return false;\n    }\n\n    // Check if each color appears exactly 9 times\n    const incorrectColors = Object.entries(colorCounts)\n      .filter(([_, count]) => count !== 9);\n    \n    if (incorrectColors.length > 0) {\n      console.error(\"Invalid state: Incorrect color counts.\", \n        incorrectColors.map(([color, count]) => `${color}: ${count}`).join(', '));\n      return false;\n    }\n\n    // Now try to create a cubejs instance to validate the state\n    try {\n      // Attempt to create a Cube instance from the state\n      const faceletString = stateToFaceletString(state);\n      const cube = Cube.fromString(faceletString);\n      \n      // Additional check: center pieces must be different\n      const centers = [state.U[4], state.D[4], state.F[4], state.B[4], state.L[4], state.R[4]];\n      const uniqueCenters = new Set(centers);\n      \n      if (uniqueCenters.size !== 6) {\n        console.error(\"Invalid state: Not all center pieces are different colors.\");\n        return false;\n      }\n      \n      return true;\n    } catch (error) {\n      console.error(\"Invalid state: The cube configuration is not solvable.\", error);\n      return false;\n    }\n  }\n\n  // --- Removed Methods ---\n  // Removed analyzeCubeAndCreateSteps, solveSteps, all get...Tips,\n  // describe...Locations, findEdges, findCorners, findMiddleLayerEdges,\n  // isEdgeYellow, isEdgeCorrectlyPlaced, isCornerCorrectlyPlaced,\n  // getAdjacent..., getCenterColor, getOppositeEdgeIndex, getFaceName,\n  // all hasYellow..., areAdjacentCorners, isCornerOriented,\n  // isMiddleLayerComplete, areYellowCornersOriented, getCornerColors,\n  // getTargetCornerColors, getAdjacentCornerFaces, solveWhiteCross,\n  // solveWhiteCorners, solveMiddleLayer, solveYellowCross, solveYellowCorners,\n  // getOptimal..., getTarget..., getYellowPattern, areYellowCornersPositioned,\n  // getCorrectlyPositionedCornerCount, getSolveProgress, getCurrentStep,\n  // getCurrentProgress, getNextStep, getPreviousStep, isEdgeFlipped.\n\n}\n\n// Example usage (optional, for testing)\n/*\nasync function testSolver() {\n    // Standard solved state\n    const solvedState: CubeState = {\n        U: ['W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W'], // White\n        R: ['R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R'], // Red\n        F: ['G', 'G', 'G', 'G', 'G', 'G', 'G', 'G', 'G'], // Green\n        D: ['Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y'], // Yellow\n        L: ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O'], // Orange\n        B: ['B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B'], // Blue\n    };\n\n    try {\n        const solver = new CubeSolver(solvedState);\n\n        // Apply a scramble\n        const scramble: Move[] = [\"F\", \"R\", \"U\", \"R'\", \"U'\", \"F'\"]; // Sexy move\n        scramble.forEach(move => solver.applyMove(move));\n        console.log(\"State after scramble:\", solver.state);\n\n\n        // Solve the scrambled cube\n        const solution = await solver.solve();\n        console.log(`Solution (${solution.length} moves):`, solution.join(' '));\n\n        // Verify by applying the solution\n        const verifier = new CubeSolver(solver.state); // Start from scrambled state\n        solution.forEach(move => verifier.applyMove(move));\n        console.log(\"State after applying solution:\", verifier.state);\n\n        if (CubeSolver.isValidState(verifier.state) && JSON.stringify(verifier.state) === JSON.stringify(solvedState)) {\n             console.log(\"Verification successful: Cube is solved!\");\n        } else {\n             console.error(\"Verification failed: Cube is not solved.\");\n        }\n\n    } catch (error) {\n        console.error(\"Error during testing:\", error);\n    }\n}\n\n// Run the test\n// testSolver();\n*/"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1569, "column": 0}, "map": {"version":3,"sources":["file:///Users/minarizk/Downloads/rubiknext/src/components/CubeInput.tsx"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { CubeState, Face, Color } from '@/types/cube';\nimport ColorPicker from './ColorPicker';\nimport { Tooltip } from 'react-tooltip';\nimport { CubeSolver } from '@/utils/cubeSolver';\n\ninterface CubeInputProps {\n  initialDisplayState: CubeState;\n  onSubmit: (state: CubeState) => void;\n  onResetRequest: () => void;\n}\n\nexport default function CubeInput({ initialDisplayState, onSubmit, onResetRequest }: CubeInputProps) {\n  const [cubeState, setCubeState] = useState<CubeState>(initialDisplayState);\n  const [selectedColor, setSelectedColor] = useState<Color>('W');\n  const [focusedCell, setFocusedCell] = useState<{face: Face, index: number} | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    setCubeState(initialDisplayState);\n    setError(null);\n  }, [initialDisplayState]);\n\n  const handleCellClick = useCallback((face: Face, index: number) => {\n    setCubeState(prev => ({\n      ...prev,\n      [face]: [\n        ...prev[face].slice(0, index),\n        selectedColor,\n        ...prev[face].slice(index + 1)\n      ]\n    }));\n    setError(null);\n  }, [selectedColor]);\n\n  const handleColorSelect = (color: Color) => {\n    setSelectedColor(color);\n  };\n\n  const handleSubmit = () => {\n    try {\n      if (!CubeSolver.isValidState(cubeState)) {\n        setError(\"Invalid cube state. Check console for details (e.g., color counts, solvability).\");\n        return;\n      }\n      \n      onSubmit(cubeState);\n      setError(null);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : \"An unknown error occurred\";\n      console.error(\"Error submitting cube:\", errorMessage);\n      setError(errorMessage);\n    }\n  };\n\n  const handleReset = () => {\n    onResetRequest();\n    setSelectedColor('W');\n    setError(null);\n  };\n\n  const handleKeyNavigation = useCallback((e: KeyboardEvent) => {\n    if (!focusedCell) return;\n\n    const { face, index } = focusedCell;\n    const newFace = face;\n    let newIndex = index;\n\n    switch (e.key) {\n      case 'ArrowUp':\n        newIndex = Math.max(0, index - 3);\n        break;\n      case 'ArrowDown':\n        newIndex = Math.min(8, index + 3);\n        break;\n      case 'ArrowLeft':\n        newIndex = index % 3 === 0 ? index : index - 1;\n        break;\n      case 'ArrowRight':\n        newIndex = index % 3 === 2 ? index : index + 1;\n        break;\n      case ' ':\n      case 'Enter':\n        handleCellClick(face, index);\n        break;\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n        const colors: Color[] = ['W', 'Y', 'R', 'O', 'B', 'G'];\n        setSelectedColor(colors[parseInt(e.key) - 1]);\n        break;\n      default:\n        return;\n    }\n\n    setFocusedCell({ face: newFace, index: newIndex });\n    e.preventDefault();\n  }, [focusedCell, handleCellClick]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyNavigation);\n    return () => window.removeEventListener('keydown', handleKeyNavigation);\n  }, [handleKeyNavigation]);\n\n  const renderFace = (face: Face) => (\n    <div className=\"face-input text-center\">\n      <div className=\"flex items-center justify-between mb-2\">\n        <h3 className=\"text-base font-medium text-foreground flex items-center gap-1.5\">\n          <div className={`w-4 h-4 rounded-full ${getColorClasses(cubeState[face][4])}`}></div>\n          {getFaceName(face)}\n        </h3>\n        <span className=\"text-xs bg-secondary px-2 py-0.5 rounded-md text-secondary-foreground\">\n          {getFacePosition(face)}\n        </span>\n      </div>\n      <div className=\"grid grid-cols-3 gap-1.5\" role=\"grid\">\n        {cubeState[face].map((color, index) => (\n          <button\n            key={`${face}-${index}`}\n            onClick={() => handleCellClick(face, index)}\n            onFocus={() => setFocusedCell({ face, index })}\n            onBlur={() => setFocusedCell(null)}\n            className={`\n              aspect-square w-12 h-12 sm:w-16 sm:h-16 rounded-md \n              transition-all duration-200 border-2 border-gray-800\n              ${getColorClasses(color)}\n              hover:scale-105 hover:shadow-md focus:outline-none\n              ${index === 4 ? 'border-white/30' : ''}\n              ${focusedCell?.face === face && focusedCell?.index === index \n                ? 'ring-2 ring-primary ring-offset-2 ring-offset-background scale-105' \n                : ''}\n            `}\n            aria-label={`${getFaceName(face)} face, position ${index + 1}, current color: ${color}`}\n            tabIndex={0}\n          />\n        ))}\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      <ColorPicker selectedColor={selectedColor} onColorSelect={handleColorSelect} />\n      \n      <div className=\"bg-black p-5 rounded-xl border border-gray-800 transition-all duration-300\">\n        {error && (\n          <div className=\"mb-4 p-3 bg-red-500/20 text-red-400 rounded-lg flex items-center gap-2 text-sm\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n              <path d=\"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z\"/>\n              <path d=\"M12 9v4\"/>\n              <path d=\"M12 17h.01\"/>\n            </svg>\n            <p>{error}</p>\n          </div>\n        )}\n        \n        <div className=\"grid gap-6\">\n          <div className=\"flex justify-center\">\n            {renderFace('U')}\n          </div>\n          \n          <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-6 place-items-center\">\n            {renderFace('L')}\n            {renderFace('F')}\n            {renderFace('R')}\n            {renderFace('B')}\n          </div>\n          \n          <div className=\"flex justify-center\">\n            {renderFace('D')}\n          </div>\n        </div>\n\n        <div className=\"mt-8 flex flex-col sm:flex-row justify-center gap-4\">\n          <button\n            onClick={handleReset}\n            type=\"button\"\n            className=\"px-6 py-3 bg-secondary hover:bg-secondary/80 text-white rounded-lg \n                     transition-all duration-200 text-base font-medium\n                     flex items-center justify-center gap-2\"\n            aria-label=\"Reset cube to default state\"\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n              <path d=\"M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8\"/>\n              <path d=\"M3 3v5h5\"/>\n            </svg>\n            Reset\n          </button>\n          <button\n            onClick={handleSubmit}\n            type=\"button\"\n            className=\"px-6 py-3 bg-primary text-white rounded-lg \n                     transition-all duration-200 text-base font-medium\n                     flex items-center justify-center gap-2\"\n            aria-label=\"Solve the cube with current configuration\"\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n              <path d=\"M17.8 19.2 16 11l3.5-3.5C21 6 21.5 4 21 3c-1-.5-3 0-4.5 1.5L13 8 4.8 6.2c-.5-.1-.9.1-1.1.5l-.3.5c-.2.5-.1 1 .3 1.3L9 12l-2 3H4l-1 1 3 2 2 3 1-1v-3l3-2 3.5 5.3c.3.4.8.5 1.3.3l.5-.2c.4-.3.6-.7.5-1.2z\"/>\n            </svg>\n            Solve Cube\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction getFaceName(face: Face): string {\n  const faceNames = {\n    U: 'Top',\n    D: 'Bottom',\n    L: 'Left',\n    R: 'Right',\n    F: 'Front',\n    B: 'Back'\n  };\n  return faceNames[face];\n}\n\nfunction getFacePosition(face: Face): string {\n  const facePositions = {\n    U: 'Top',\n    D: 'Bottom',\n    L: 'Left',\n    R: 'Right',\n    F: 'Front',\n    B: 'Back'\n  };\n  return facePositions[face];\n}\n\nfunction getColorClasses(color: string): string {\n  const colorClasses = {\n    'W': 'bg-cube-white',\n    'Y': 'bg-cube-yellow',\n    'R': 'bg-cube-red',\n    'O': 'bg-cube-orange',\n    'B': 'bg-cube-blue',\n    'G': 'bg-cube-green'\n  };\n  \n  return colorClasses[color as keyof typeof colorClasses] || '';\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2022, "column": 0}, "map": {"version":3,"sources":["file:///Users/minarizk/Downloads/rubiknext/src/components/SolveGuide.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Move } from '@/types/cube';\nimport { CubeSolver } from '@/utils/cubeSolver';\n\ninterface SolveGuideProps {\n  solutionMoves: Move[] | null;\n  isLoading: boolean;\n  error: string | null;\n}\n\n// Function to get the rotation arrow based on move direction\nfunction getRotationArrow(move: string): React.ReactNode {\n  // Determine if it's clockwise, counterclockwise or double\n  const modifier = move.slice(1);\n  \n  if (modifier === \"'\") {\n    // Counterclockwise arrow\n    return (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"text-blue-400\">\n        <path d=\"M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8\"/>\n        <path d=\"M3 3v5h5\"/>\n      </svg>\n    );\n  } else if (modifier === \"2\") {\n    // Double turn (180 degrees)\n    return (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"text-purple-400\">\n        <path d=\"m15 15 6 6m-6 0 6-6\"/>\n        <path d=\"M14.5 9.5 12 2l-2.5 7.5L2 12l7.5 2.5L12 22l2.5-7.5L22 12l-7.5-2.5z\"/>\n      </svg>\n    );\n  } else {\n    // Clockwise arrow\n    return (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"text-green-400\">\n        <path d=\"M21 12a9 9 0 1 1-9-9c2.52 0 4.85.99 6.62 2.62L21 8\"/>\n        <path d=\"M21 3v5h-5\"/>\n      </svg>\n    );\n  }\n}\n\n// Function to get a colored face badge for face reference\nfunction getFaceBadge(face: string): React.ReactNode {\n  const faceColors: Record<string, string> = {\n    'U': 'bg-white text-gray-800',      // White for Up\n    'D': 'bg-yellow-400 text-gray-800', // Yellow for Down\n    'F': 'bg-green-600 text-white',     // Green for Front\n    'B': 'bg-blue-600 text-white',      // Blue for Back\n    'L': 'bg-orange-500 text-white',    // Orange for Left\n    'R': 'bg-red-600 text-white',       // Red for Right\n  };\n  \n  const faceName: Record<string, string> = {\n    'U': 'Top',\n    'D': 'Bottom',\n    'F': 'Front',\n    'B': 'Back',\n    'L': 'Left',\n    'R': 'Right',\n  };\n  \n  return (\n    <div className={`flex items-center gap-1 rounded px-2 py-1 ${faceColors[face]}`}>\n      <span className=\"font-bold\">{face}</span>\n      <span className=\"text-xs\">{faceName[face]}</span>\n    </div>\n  );\n}\n\nexport default function SolveGuide({ solutionMoves, isLoading, error }: SolveGuideProps) {\n  const isSolved = solutionMoves !== null && solutionMoves.length === 0;\n  const hasSolution = solutionMoves !== null && solutionMoves.length > 0;\n  \n  // New state to toggle between standard notation and beginner mode\n  const [showBeginnerMode, setShowBeginnerMode] = useState(true);\n  \n  // Generate beginner-friendly instructions if we have a solution\n  const friendlyInstructions = hasSolution && showBeginnerMode \n    ? CubeSolver.getBeginnerFriendlyInstructions(solutionMoves as string[])\n    : [];\n    \n  // Group steps into logical chunks for easier understanding\n  const groupedSteps = hasSolution && showBeginnerMode\n    ? CubeSolver.getGroupedSolution(solutionMoves as string[])\n    : [];\n    \n  // Track if user wants to see the face reference\n  const [showFaceReference, setShowFaceReference] = useState(false);\n\n  return (\n    <div className=\"space-y-5 animate-fade\">\n      <div className=\"bg-gray-900 p-4 rounded-lg border border-gray-800\">\n        <div className=\"flex items-center justify-between mb-3\">\n             <h3 className=\"font-semibold text-white\">Solution Algorithm</h3>\n             \n             {hasSolution && (\n               <div className=\"flex items-center gap-2\">\n                 <button \n                   className={`text-xs px-3 py-1 rounded-md transition ${showBeginnerMode ? 'bg-primary text-white' : 'bg-gray-800 text-gray-400'}`}\n                   onClick={() => setShowBeginnerMode(true)}\n                 >\n                   Beginner Mode\n                 </button>\n                 <button \n                   className={`text-xs px-3 py-1 rounded-md transition ${!showBeginnerMode ? 'bg-primary text-white' : 'bg-gray-800 text-gray-400'}`}\n                   onClick={() => setShowBeginnerMode(false)}\n                 >\n                   Standard Notation\n                 </button>\n               </div>\n             )}\n        </div>\n\n        <div className=\"mt-4 min-h-[60px]\">\n            {isLoading && (\n                <div className=\"flex items-center justify-center text-gray-400\">\n                    <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                        <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                        <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                    </svg>\n                    Calculating solution...\n                </div>\n            )}\n            {error && !isLoading && (\n                <div className=\"text-red-500 text-sm p-3 bg-red-900/30 rounded border border-red-800\">\n                    <strong>Error:</strong> {error}\n                </div>\n            )}\n            {!isLoading && !error && (\n                 isSolved ? (\n                     <p className=\"text-green-400 font-medium text-center\">Cube is already solved!</p>\n                 ) : hasSolution ? (\n                    <div className=\"space-y-2\">\n                         <p className=\"text-sm text-gray-300\">Found solution ({solutionMoves.length} moves):</p>\n                         \n                         {showBeginnerMode ? (\n                           <div className=\"space-y-4\">\n                             {/* Add buttons for legend visibility */}\n                             <div className=\"flex flex-wrap gap-2 text-xs\">\n                               <button\n                                 onClick={() => setShowFaceReference(!showFaceReference)}\n                                 className=\"bg-gray-700 hover:bg-gray-600 text-gray-300 px-2 py-1 rounded flex items-center gap-1\"\n                               >\n                                 {showFaceReference ? 'Hide' : 'Show'} Cube Face Reference\n                                 <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                                   <rect width=\"18\" height=\"18\" x=\"3\" y=\"3\" rx=\"2\" ry=\"2\" />\n                                   <path d=\"M3 9h18\" />\n                                   <path d=\"M3 15h18\" />\n                                   <path d=\"M9 3v18\" />\n                                   <path d=\"M15 3v18\" />\n                                 </svg>\n                               </button>\n                             </div>\n                           \n                             {/* Face legend */}\n                             {showFaceReference && (\n                               <div className=\"bg-gray-800 p-3 rounded\">\n                                 <h4 className=\"text-gray-300 text-xs font-medium mb-2\">Cube Face Reference:</h4>\n                                 <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-2\">\n                                   {['U', 'D', 'F', 'B', 'L', 'R'].map(face => (\n                                     <div key={face} className=\"flex items-center gap-2\">\n                                       {getFaceBadge(face)}\n                                     </div>\n                                   ))}\n                                 </div>\n                                 <div className=\"border border-gray-700 rounded p-2 mt-2 text-xs text-gray-400\">\n                                   <p className=\"mb-1\">Hold the cube with the <span className=\"text-green-500\">green face</span> towards you and <span className=\"text-white\">white face</span> on top.</p>\n                                 </div>\n                               </div>\n                             )}\n                           \n                             {/* Add a simple legend for the arrows */}\n                             <div className=\"bg-gray-800 p-2 rounded flex flex-wrap gap-3 text-xs\">\n                               <div className=\"flex items-center gap-1\">\n                                 {getRotationArrow('R')}\n                                 <span className=\"text-gray-300\">Clockwise</span>\n                               </div>\n                               <div className=\"flex items-center gap-1\">\n                                 {getRotationArrow(\"R'\")}\n                                 <span className=\"text-gray-300\">Counterclockwise</span>\n                               </div>\n                               <div className=\"flex items-center gap-1\">\n                                 {getRotationArrow('R2')}\n                                 <span className=\"text-gray-300\">180° Turn</span>\n                               </div>\n                             </div>\n                             \n                             {/* Grouped steps for easier understanding */}\n                             {groupedSteps.map((group, groupIndex) => (\n                               <div key={groupIndex} className=\"bg-gray-800 p-3 rounded\">\n                                 <h4 className=\"text-primary font-medium mb-2\">{group.description}</h4>\n                                 <div className=\"space-y-2\">\n                                   {group.moves.map((move, moveIndex) => {\n                                     const face = move.charAt(0);\n                                     const instruction = friendlyInstructions.find(i => i.move === move);\n                                     return (\n                                       <div key={moveIndex} className=\"border-l-2 border-gray-700 pl-3 py-1\">\n                                         <div className=\"flex items-center gap-2\">\n                                           <span className=\"bg-gray-700 text-white text-xs px-2 py-1 rounded flex items-center gap-1\">\n                                             {move}\n                                             {getRotationArrow(move as string)}\n                                           </span>\n                                           <span className=\"text-white\">{instruction?.description}</span>\n                                         </div>\n                                         <p className=\"text-gray-400 text-sm mt-1\">{instruction?.longDescription}</p>\n                                       </div>\n                                     );\n                                   })}\n                                 </div>\n                               </div>\n                             ))}\n                             \n                             <p className=\"text-xs text-gray-500 mt-2\">\n                               Tip: You can switch to \"Standard Notation\" above if you're comfortable with cube notation.\n                             </p>\n                           </div>\n                         ) : (\n                           <code className=\"block w-full bg-gray-800 p-3 rounded text-white text-sm break-words\">\n                             {solutionMoves.join(' ')}\n                           </code>\n                         )}\n                    </div>\n                 ) : (\n                    <p className=\"text-gray-500 text-sm text-center pt-3\">Submit a cube state or run the test solve to see the solution.</p>\n                 )\n            )}\n        </div>\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2685, "column": 0}, "map": {"version":3,"sources":["file:///Users/minarizk/Downloads/rubiknext/src/components/UserGuide.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\n// Add props interface\ninterface UserGuideProps {\n  onTestSolve: () => void;\n}\n\nexport default function UserGuide({ onTestSolve }: UserGuideProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  return (\n    <div className=\"bg-black p-5 rounded-xl border border-gray-800 mb-8\">\n      <button \n        onClick={() => setIsExpanded(prev => !prev)}\n        className=\"w-full flex items-center justify-between text-white font-semibold text-lg py-2\"\n      >\n        <div className=\"flex items-center gap-2\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n            <circle cx=\"12\" cy=\"12\" r=\"10\"/>\n            <path d=\"M12 16v-4\"/>\n            <path d=\"M12 8h.01\"/>\n          </svg>\n          How to Use This Solver\n        </div>\n        <svg \n          xmlns=\"http://www.w3.org/2000/svg\" \n          width=\"20\" \n          height=\"20\" \n          viewBox=\"0 0 24 24\" \n          fill=\"none\" \n          stroke=\"currentColor\" \n          strokeWidth=\"2\" \n          strokeLinecap=\"round\" \n          strokeLinejoin=\"round\"\n          className={`transform transition-transform ${isExpanded ? 'rotate-180' : ''}`}\n        >\n          <path d=\"m6 9 6 6 6-6\"/>\n        </svg>\n      </button>\n      \n      {isExpanded && (\n        <div className=\"mt-4 text-gray-300 space-y-4 animate-fade-down animate-duration-300\">\n          <div>\n            <h3 className=\"text-primary font-medium mb-2\">Input Your Cube State</h3>\n            <p className=\"text-sm\">\n              Click on the cube faces and use the color selector to match your physical cube. \n              Make sure to enter the colors exactly as they appear on your cube.\n            </p>\n          </div>\n          \n          <div>\n            <h3 className=\"text-primary font-medium mb-2\">Orientation Matters</h3>\n            <p className=\"text-sm\">\n              When entering your cube, hold it with white (or the lightest color) on top and \n              green (or your front color) facing you. Each center piece defines its face color.\n            </p>\n            <div className=\"grid grid-cols-3 gap-3 my-3 bg-gray-900 p-3 rounded-md\">\n              <div className=\"flex flex-col items-center\">\n                <div className=\"w-10 h-10 bg-cube-white mb-1 rounded-md\"></div>\n                <span className=\"text-xs\">Top (U)</span>\n              </div>\n              <div className=\"flex flex-col items-center\">\n                <div className=\"w-10 h-10 bg-cube-yellow mb-1 rounded-md\"></div>\n                <span className=\"text-xs\">Bottom (D)</span>\n              </div>\n              <div className=\"flex flex-col items-center\">\n                <div className=\"w-10 h-10 bg-cube-green mb-1 rounded-md\"></div>\n                <span className=\"text-xs\">Front (F)</span>\n              </div>\n              <div className=\"flex flex-col items-center\">\n                <div className=\"w-10 h-10 bg-cube-blue mb-1 rounded-md\"></div>\n                <span className=\"text-xs\">Back (B)</span>\n              </div>\n              <div className=\"flex flex-col items-center\">\n                <div className=\"w-10 h-10 bg-cube-orange mb-1 rounded-md\"></div>\n                <span className=\"text-xs\">Left (L)</span>\n              </div>\n              <div className=\"flex flex-col items-center\">\n                <div className=\"w-10 h-10 bg-cube-red mb-1 rounded-md\"></div>\n                <span className=\"text-xs\">Right (R)</span>\n              </div>\n            </div>\n          </div>\n          \n          <div>\n            <h3 className=\"text-primary font-medium mb-2\">Common Errors</h3>\n            <ul className=\"text-sm list-disc list-inside ml-1 space-y-1.5\">\n              <li>\n                <strong>Incorrect Color Count</strong>: Each color must appear exactly 9 times\n              </li>\n              <li>\n                <strong>Center Pieces</strong>: All 6 center pieces must be different colors\n              </li>\n              <li>\n                <strong>Unsolvable State</strong>: Some combinations of colors are physically impossible\n              </li>\n              <li>\n                <strong>Inconsistent Edges/Corners</strong>: Each edge or corner piece should be consistent with a real cube\n              </li>\n            </ul>\n          </div>\n          \n          <div>\n            <h3 className=\"text-primary font-medium mb-2\">Reading the Solution</h3>\n            <p className=\"text-sm\">\n              Once solved, the algorithm provides a sequence of moves using standard notation:\n            </p>\n            <div className=\"bg-gray-900 p-3 rounded-md text-sm mt-2 overflow-x-auto\">\n              <code>\n                <span className=\"text-primary\">U</span>: Top face clockwise • \n                <span className=\"text-primary\"> U'</span>: Top face counter-clockwise • \n                <span className=\"text-primary\"> U2</span>: Top face twice\n                <br />\n                <span className=\"text-primary\">R</span>: Right face clockwise • \n                <span className=\"text-primary\"> F</span>: Front face clockwise • \n                <span className=\"text-primary\"> D</span>: Bottom face clockwise\n                <br />\n                <span className=\"text-primary\">L</span>: Left face clockwise • \n                <span className=\"text-primary\"> B</span>: Back face clockwise\n              </code>\n            </div>\n          </div>\n          \n          <div>\n            <h3 className=\"text-primary font-medium mb-2\">Tips for Success</h3>\n            <ul className=\"text-sm list-disc list-inside ml-1 space-y-1.5\">\n              <li>Double-check your input before submitting</li>\n              <li>Keep your cube in the same orientation while entering colors</li>\n              <li>If you're getting errors, try resetting and re-entering your cube state</li>\n              <li>This solver uses the powerful Kociemba algorithm and can solve any valid cube state</li>\n            </ul>\n          </div>\n\n          {/* Add Test Solve Button */}\n          <div className=\"pt-2 border-t border-gray-700 mt-4\">\n            <button\n              onClick={onTestSolve}\n              className=\"w-full flex items-center justify-center gap-2 px-4 py-2 mt-2 rounded-lg text-sm font-medium transition-all bg-secondary hover:bg-secondary/80 text-white\"\n              aria-label=\"Run a test solve with a predefined scramble\"\n            >\n               <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                 <path d=\"m12 14 4-4\"/><path d=\"M3.34 19a10 10 0 1 1 17.32 0\"/>\n               </svg>\n               Run Test Solve\n            </button>\n             <p className=\"text-xs text-gray-500 text-center mt-2\">\n               See how the solver handles a sample scramble.\n             </p>\n          </div>\n\n        </div>\n      )}\n    </div>\n  );\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3335, "column": 0}, "map": {"version":3,"sources":["file:///Users/minarizk/Downloads/rubiknext/src/app/page.tsx"],"sourcesContent":["'use client';\n\nimport CubeInput from '@/components/CubeInput';\nimport SolveGuide from '@/components/SolveGuide';\nimport UserGuide from '@/components/UserGuide';\nimport { CubeSolver } from '@/utils/cubeSolver';\nimport { CubeState, Move } from '@/types/cube';\nimport { useState, useEffect } from 'react';\n\n// Initial solved state constant\nconst solvedState: CubeState = {\n  U: Array(9).fill('W'), D: Array(9).fill('Y'), L: Array(9).fill('O'),\n  R: Array(9).fill('R'), F: Array(9).fill('G'), B: Array(9).fill('B')\n};\n\n// Define a standard test scramble\nconst testScramble: Move[] = [\n  \"F\", \"R\", \"U\", \"R'\", \"U'\", \"F'\", // Sexy Move\n  \"B\", \"L\", \"D\", \"L'\", \"D'\", \"B'\"  // Another sequence\n];\n\nexport default function Home() {\n  // Keep solver instance if needed for other operations, otherwise could be removed\n  // const [solver, setSolver] = useState<CubeSolver | null>(null); \n  const [error, setError] = useState<string | null>(null); // For creation/validation errors\n  const [displayState, setDisplayState] = useState<CubeState>(solvedState);\n\n  // State specific to the solution process\n  const [solutionMoves, setSolutionMoves] = useState<Move[] | null>(null);\n  const [isLoadingSolution, setIsLoadingSolution] = useState(false);\n  const [solveError, setSolveError] = useState<string | null>(null); // For solving errors\n\n  // Add state to track if the core solver is ready\n  const [isSolverEngineReady, setIsSolverEngineReady] = useState(CubeSolver.isEngineInitialized());\n\n  // --- Proactive Solver Initialization --- \n  useEffect(() => {\n    // Use the new public static getters\n    if (!CubeSolver.isEngineInitialized() && !CubeSolver.isEngineInitializing()) {\n        console.log(\"Home component mounted, initializing solver engine...\");\n        CubeSolver.initializeSolver().then(() => {\n            console.log(\"Solver engine initialized successfully.\");\n            setIsSolverEngineReady(true);\n        }).catch(err => {\n            console.error(\"Solver engine initialization failed:\", err);\n            setError(\"Critical error: Could not initialize the cube solving engine.\");\n        });\n    } else if (CubeSolver.isEngineInitializing()) {\n        console.log(\"Solver engine is already initializing, waiting...\");\n        const checkInterval = setInterval(() => {\n            if (CubeSolver.isEngineInitialized()) {\n                console.log(\"Detected solver engine finished initializing.\");\n                setIsSolverEngineReady(true);\n                clearInterval(checkInterval);\n            } else if (!CubeSolver.isEngineInitializing()) {\n                 console.error(\"Detected solver engine initialization failed elsewhere.\");\n                 setError(\"Critical error: Could not initialize the cube solving engine.\");\n                 clearInterval(checkInterval);\n            }\n        }, 200);\n        return () => clearInterval(checkInterval);\n    }\n  }, []); \n\n  // Triggered by CubeInput onSubmit or handleTestSolve\n  const handleCubeInput = async (state: CubeState) => {\n    setError(null); // Clear previous creation errors\n    setSolveError(null);\n    setSolutionMoves(null);\n    setDisplayState(state); // Update display\n    setIsLoadingSolution(true); // Start loading indicator\n\n    try {\n      // Create the solver instance - validation happens inside constructor\n      const newSolver = new CubeSolver(state);\n      // setSolver(newSolver); // Store solver instance if needed elsewhere\n\n      // --- Automatically trigger solve --- \n      console.log(\"Solver created, attempting to solve...\");\n      const moves = await newSolver.solve(); // Call solve directly\n      \n      if (moves.length === 0 && CubeSolver.isValidState(newSolver.getState())) {\n         // Check if it was already solved\n         if (JSON.stringify(newSolver.getState()) === JSON.stringify(solvedState)) {\n             console.log(\"Cube is already solved.\");\n             setSolutionMoves([]); // Indicate solved\n         } else {\n             console.error(\"Solver returned empty moves for a non-solved state.\");\n             setSolveError(\"Failed to find a solution. The cube might be unsolvable or solver failed.\");\n             setSolutionMoves(null);\n         }\n      } else if (moves.length > 0) {\n         console.log(`Solution found with ${moves.length} moves.`);\n         setSolutionMoves(moves);\n      } else {\n         // This case might occur if isValidState failed subtly after constructor?\n         console.error(\"Solver returned empty moves, state might be invalid despite checks.\");\n         setSolveError(\"Could not solve the cube. State might be invalid.\");\n         setSolutionMoves(null);\n      }\n      // --- Solve attempt finished --- \n\n    } catch (err) {\n      // Errors from CubeSolver constructor (validation) or newSolver.solve()\n      console.error(\"Error during cube processing or solving:\", err);\n      const message = err instanceof Error ? err.message : \"Failed to process or solve cube state\";\n      setError(message); // Show error at the top level\n      setSolutionMoves(null);\n      setSolveError(null);\n      // setSolver(null);\n    } finally {\n       setIsLoadingSolution(false); // Stop loading indicator\n    }\n  };\n\n  // Called when the \"Test Solve\" button is clicked\n  const handleTestSolve = async () => { // Make async\n    setError(null);\n    setSolveError(null);\n    setSolutionMoves(null);\n    // setSolver(null); \n    setIsLoadingSolution(true); // Start loading early for test setup\n\n    try {\n      // Apply scramble to a temporary solver to get the state\n      // Use solvedState constant directly\n      const tempSolver = new CubeSolver(solvedState); \n      testScramble.forEach(move => tempSolver.applyMove(move));\n      const scrambledState = tempSolver.getState();\n      \n      // Trigger the input handler which will create solver and solve\n      await handleCubeInput(scrambledState); \n      \n    } catch (err) {\n       console.error(\"Error during test solve setup:\", err);\n       setError(\"Failed to set up the test scramble.\");\n       setDisplayState(solvedState); // Reset display on error\n       setSolutionMoves(null);\n       setSolveError(null);\n       // setSolver(null);\n       setIsLoadingSolution(false);\n    }\n    // Loading state is handled within handleCubeInput\n  };\n  \n  // Called when CubeInput requests a reset\n  const handleResetRequest = () => {\n      setError(null);\n      setSolveError(null); \n      setSolutionMoves(null);\n      // setSolver(null);\n      setDisplayState(solvedState);\n      setIsLoadingSolution(false);\n  };\n\n  return (\n    <div className=\"container mx-auto py-6 px-4 animate-fade\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"text-center mb-6\">\n          <h1 className=\"text-3xl font-bold text-white mb-2\">\n            Rubik&apos;s Cube Solver\n          </h1>\n          <p className=\"text-gray-400 max-w-2xl mx-auto\">\n            Enter your scrambled cube state and get an optimal solution using the Kociemba algorithm\n          </p>\n        </div>\n\n        {/* Show loading indicator while solver initializes */}\n        {!isSolverEngineReady && !error && (\n          <div className=\"mb-6 p-4 bg-blue-900/30 border border-blue-700 rounded-lg text-center\">\n            <p className=\"text-blue-300 flex items-center justify-center gap-2\">\n               <svg className=\"animate-spin h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\"><circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle><path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path></svg>\n              Initializing solving engine (this may take a few seconds)... \n            </p>\n          </div>\n        )}\n\n        <UserGuide onTestSolve={handleTestSolve} />\n\n        {error && (\n          <div className=\"mb-6 p-4 bg-red-500/20 border border-red-700 rounded-lg\">\n            <p className=\"text-red-400 flex items-center gap-2\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                <circle cx=\"12\" cy=\"12\" r=\"10\"/>\n                <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\"/>\n                <line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\"/>\n              </svg>\n              {error}\n            </p>\n          </div>\n        )}\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-12 gap-6 items-start\">\n          <div className=\"lg:col-span-7\">\n            <CubeInput \n              key={JSON.stringify(displayState)}\n              initialDisplayState={displayState} \n              onSubmit={handleCubeInput} \n              onResetRequest={handleResetRequest} \n            />\n          </div>\n          \n          <div className=\"lg:col-span-5 lg:sticky lg:top-8\">\n            <div className=\"bg-black p-6 rounded-xl border border-gray-800 shadow-lg\">\n              <h2 className=\"text-xl font-semibold mb-6 flex items-center gap-2 text-white\">\n                <span className=\"text-primary\">2.</span> Solution\n              </h2>\n              {/* Pass solution state down to SolveGuide */}\n              <SolveGuide \n                 solutionMoves={solutionMoves} \n                 isLoading={isLoadingSolution} \n                 error={solveError} \n               />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}